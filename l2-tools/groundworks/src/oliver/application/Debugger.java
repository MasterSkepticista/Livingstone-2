//
// * See the file "l2-tools/disclaimers-and-notices.txt" for
// * information on usage and redistribution of this file,
// * and for a DISCLAIMER OF ALL WARRANTIES.
//

/*
 * Debugger.java
 *
 * Created on November 15, 2002, 2:51 PM
 */

package oliver.application;

/**
 *
 * @author  stephen
 */
public class Debugger extends AbstractApplicationFrame implements oliver.scenario.HistoryControlInterface.LivingstoneViewControlListener {
    
    private final String applicationName = "debugger";
    private livdll.LivingstoneAdapter livingstone = null;
    
    /** Creates new form Debugger */
    public Debugger(UserProperties up, String precompiledModelFileName, String compiledModelFileName, String paramsFileName) throws Exception {
        super(up);
        initComponents();
        //((oliver.schematic.SchematicView)schematicView).set
        livingstone = new livdll.LivingstoneAdapter();
        livingstone.loadParameters(new java.io.File(paramsFileName));
        String rootTypeName = livingstone.loadModel(new java.io.File(compiledModelFileName));
        loadPreCompiledModel(new java.io.File(precompiledModelFileName), rootTypeName);
        postInit();
    }
    
    /** This is init things that netbeans didn't do. */
    private void postInit() throws java.io.IOException, livdll.L2Exception {
        livingstone.addEngineListener((livdll.EngineListener)candidateListView);
        ((oliver.scenario.ScenarioManager)scenarioPane).setEngineControl(livingstone);
        ((oliver.scenario.CandidateListView)candidateListView).addLivingstoneViewControlListener(this);
        livingstone.startEngine();
        
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension size = userProperties.getDimension(getApplicationName()+".windowSize",  600, 400);
        if(size.width > screenSize.width) size.width = screenSize.width;
        if(size.height > screenSize.height) size.height = screenSize.height;
        pack();
        setSize(size);
        jSplitPane1.setDividerLocation(userProperties.getInt(getApplicationName()+".splitPane1.dividerLocation",jSplitPane1.getDividerLocation()));
        jSplitPane2.setDividerLocation(userProperties.getInt(getApplicationName()+".splitPane2.dividerLocation",jSplitPane2.getDividerLocation()));
        setLocation((screenSize.width-size.width)/2,(screenSize.height-size.height)/2);
    }
    
    private void loadPreCompiledModel(java.io.File file, String rootTypeName) throws Exception {
        net.n3.nanoxml.StdXMLBuilder builder = new net.n3.nanoxml.StdXMLBuilder(new oliver.xmpl.Xmpl());
        net.n3.nanoxml.IXMLParser parser = net.n3.nanoxml.XMLParserFactory.createDefaultXMLParser(builder);
        net.n3.nanoxml.IXMLReader reader = new net.n3.nanoxml.StdXMLReader(new java.io.FileReader(file));
        parser.setReader(reader);
        net.n3.nanoxml.IXMLElement xml = (net.n3.nanoxml.IXMLElement) parser.parse();
        while(!(xml instanceof oliver.xmpl.Project)) {
            xml = (net.n3.nanoxml.IXMLElement)xml.getChildren().firstElement();
        }
        if(xml != null && xml instanceof oliver.xmpl.Project) {
            final oliver.xmpl.Xmpl parent = ((oliver.xmpl.Project)xml).findType(rootTypeName);
            if(parent != null && parent instanceof oliver.xmpl.ComponentType) {
                Thread thread = new Thread(new Runnable() {
                    public void run() {
                        oliver.xmpl.ComponentType ct = (oliver.xmpl.ComponentType)parent;
                        oliver.schematic.ComponentDrawing d = ((oliver.schematic.SchematicView)schematicView).createDrawing(ct);
                        ((oliver.schematic.SchematicView)schematicView).setDrawing(d);
                    }
                });
                thread.setPriority(thread.MIN_PRIORITY);
                thread.start();
            }
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        schematicView = new oliver.schematic.SchematicView(DEBUGGER_CONTEXT, userProperties);
        historyView = new oliver.historytable.HistoryTablePanel(userProperties);
        jTabbedPane2 = new javax.swing.JTabbedPane();
        scenarioPane = new oliver.scenario.ScenarioManager();
        candidateListView = new oliver.scenario.CandidateListView(userProperties);
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jTabbedPane1.addTab("schematic", schematicView);

        historyView.setToolTipText("null");
        jTabbedPane1.addTab("history table", historyView);

        jSplitPane2.setTopComponent(jTabbedPane1);

        jTabbedPane2.addTab("scenario", scenarioPane);

        jSplitPane2.setBottomComponent(jTabbedPane2);

        jSplitPane1.setRightComponent(jSplitPane2);

        jSplitPane1.setLeftComponent(candidateListView);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");
        openMenuItem.setText("Open Scenario");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(openMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

    }//GEN-END:initComponents
    
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // Add your handling code here:
        try {
            javax.swing.JFileChooser fc = new javax.swing.JFileChooser(userProperties.getProperty("currentDirectory"));
            
            fc.setFileFilter(new javax.swing.filechooser.FileFilter() {
                public boolean accept(java.io.File f) {
                    if (f.isDirectory()) {
                        return true;
                    }
                    String extension = null;
                    String s = f.getName();
                    int i = s.lastIndexOf('.');
                    if (i > 0 &&  i < s.length() - 1) {
                        extension = s.substring(i+1).toLowerCase();
                    }
                    if (extension != null) {
                        if (extension.equalsIgnoreCase("scn") || extension.equalsIgnoreCase("scr")) {
                            return true;
                        } else {
                            return false;
                        }
                    }
                    return false;
                }
                // The description of this filter
                public String getDescription() {
                    return "Livingstone scenario files";
                }
            });
            int returnVal = fc.showOpenDialog(this);
            if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
                java.io.File file = fc.getSelectedFile();
                ((oliver.scenario.ScenarioManager)scenarioPane).load(file);
                userProperties.setProperty("currentDirectory",file.getParentFile().getAbsolutePath());
            }
        } catch(Exception e) {
            System.out.println(e);
        }
        
    }//GEN-LAST:event_openMenuItemActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        userProperties.setInt(getApplicationName()+".splitPane1.dividerLocation",jSplitPane1.getDividerLocation());
        userProperties.setInt(getApplicationName()+".splitPane2.dividerLocation",jSplitPane2.getDividerLocation());
        if(livingstone != null) livingstone.stopEngine();
        setVisible(false);
        super.exit();
    }//GEN-LAST:event_exitForm
    
    public void livingstoneViewControlListenerEvent(oliver.scenario.HistoryControlInterface.HistoryControlListenerEvent e) {
        livdll.AttributeAssignment[] a = new livdll.AttributeAssignment[0];
        if(e.showTrailingCommands) {
            java.util.Vector v = new java.util.Vector();
            java.util.Enumeration enum = e.trailingCommands.elements();
            while(enum.hasMoreElements()) {
                livdll.LivingstoneCommand c = (livdll.LivingstoneCommand)enum.nextElement();
                if(c.getArguments() != null && !c.getArguments().equals("")) {
                    java.util.StringTokenizer tok = new java.util.StringTokenizer(c.getArguments(), " ");
                    while(tok.hasMoreElements()) {
                        String arg = tok.nextToken();
                        int i = arg.indexOf("=");
                        if(i>0) {
                            v.addElement(new livdll.AttributeAssignment(arg.substring(0,i),arg.substring(i+1)));
                        }
                    }
                }
            }
            a = new livdll.AttributeAssignment[v.size()];
            v.copyInto(a);
        }
        if(e.selectedCandidate != null) {
            livdll.AttributeAssignment[][] history = e.selectedCandidate.getHistory().getAttributeAssignment();
            livdll.AttributeAssignment[] b = history[history.length-1];
            if(a.length > 0 && b.length > 0) {
                livdll.AttributeAssignment[] c = new livdll.AttributeAssignment[b.length + a.length];
                for(int i = 0; i < b.length; i++) c[i] = b[i];
                for(int i = 0; i < a.length; i++) c[b.length+i] = a[i];
                history[history.length-1] = c;
            }
            setState(history);
        } else {
            livdll.AttributeAssignment[][] history = new livdll.AttributeAssignment[1][];
            history[0] = a;
            setState(history);
        }
    }
    
    private void setState(livdll.AttributeAssignment[][] history) {
        if(history.length>0) {
            ((oliver.schematic.SchematicView)schematicView).setState(history[history.length-1]);
            ((oliver.historytable.HistoryTablePanel)historyView).setState(history);
        }
    }
    
    protected String getApplicationName() {
        return applicationName;
    }
    
    protected java.awt.Image getSplashImage() {
        return java.awt.Toolkit.getDefaultToolkit().getImage(getClass().getResource("/oliver/application/splash.gif"));
    }
    
    protected void log(String line) {
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu fileMenu;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel candidateListView;
    private javax.swing.JPanel schematicView;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JPanel historyView;
    private javax.swing.JPanel scenarioPane;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
    
}
