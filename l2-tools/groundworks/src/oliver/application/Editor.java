// 
// * See the file "l2-tools/disclaimers-and-notices.txt" for 
// * information on usage and redistribution of this file, 
// * and for a DISCLAIMER OF ALL WARRANTIES. 
// 

/*
 * Editor.java
 *
 * Created on June 17, 2002, 12:47 PM
 */

package oliver.application;

/**
 *
 * @author  stephen
 */
public class Editor extends AbstractApplicationFrame implements oliver.project.ProjectListener {
    private java.io.File file = null;
    private final String applicationName = "editor";
    //private oliver.xmpl.Project project = null;
    private oliver.project.ProjectModel model = new oliver.project.ProjectModel();
    private javax.swing.undo.UndoManager undo = new javax.swing.undo.UndoManager() {
        protected void undoTo(javax.swing.undo.UndoableEdit edit) throws javax.swing.undo.CannotUndoException {
            System.out.println("undo class: "+edit.getClass().toString());
            super.undoTo(edit);
        }
    };
    private UndoAction undoAction = new UndoAction();
    private RedoAction redoAction = new RedoAction();
    private NewAttributeTypeAction newAttributeTypeAction;
    private NewComponentTypeAction newComponentTypeAction;
    
    private boolean projectChanged;
    
    /** Creates new form Editor */
    public Editor() throws java.io.IOException {
        super();
        preInit();
        initComponents();
        postInit();
    }
    
    protected class MySplitPane extends javax.swing.JSplitPane {
        private String name;
        private int location;
        public MySplitPane(String name) {
            super();
            this.name = name;
        }
        public void setDividerLocation(int location) {
            if(this.location == location) return;
            else {
                this.location = location;
                super.setDividerLocation(location);
                userProperties.setInt(getApplicationName()+"."+name+".dividerLocation",location);
            }
        }
    }
    
    private void preInit() throws java.io.IOException {
        newAttributeTypeAction = new NewAttributeTypeAction();
        newComponentTypeAction = new NewComponentTypeAction();
    }
    
    /** This is init things that netbeans didn't do. */
    private void postInit() {
        checkFileMenuItems();
        // All the windows need to be added as listeners to the model
        ((oliver.tree.EditorTreeView)editorTreeView).setModel(model);
        model.addUndoableEditListener((oliver.tree.EditorTreeView)editorTreeView);
        
        ((oliver.project.ProjectListView)projectListView).setModel(model);
        model.addUndoableEditListener((oliver.project.ProjectListView)projectListView);
        
        ((oliver.document.XmplEditorView)jEditorPane1).setModel(model);
        model.addUndoableEditListener((oliver.document.XmplEditorView)jEditorPane1);
        
        ((oliver.schematic.SchematicView)schematicView).setModel(model);
        model.addUndoableEditListener((oliver.schematic.SchematicView)schematicView);
        
        // undo stuff
        ((oliver.document.XmplDocumentModel)jEditorPane1.getDocument()).addUndoableEditListener(this);
        model.addUndoableEditListener(this);
        
        //checkWhatsEnabled();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension size = userProperties.getDimension(getApplicationName()+".windowSize",  600, 400);
        if(size.width > screenSize.width) size.width = screenSize.width;
        if(size.height > screenSize.height) size.height = screenSize.height;
        pack();
        setSize(size);
        jSplitPane1.setDividerLocation(userProperties.getInt(getApplicationName()+".splitPane1.dividerLocation",jSplitPane1.getDividerLocation()));
        jSplitPane2.setDividerLocation(userProperties.getInt(getApplicationName()+".splitPane2.dividerLocation",jSplitPane2.getDividerLocation()));
        setLocation((screenSize.width-size.width)/2,(screenSize.height-size.height)/2);
    }
    
    /** So far instances of components are only used in the tree view.  This creates
     *  a new instance from a type and replaces the tree root with the new one.
     */
    public void openInstance(String name) throws Exception {
        //((oliver.tree.BigTreeView)bigTreeView).setComponentInstance(name);
        //jTabbedPane3.setTitleAt(0, name);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jSplitPane1 = new MySplitPane("splitPane1");
        jSplitPane2 = new MySplitPane("splitPane2");
        jTabbedPane3 = new javax.swing.JTabbedPane();
        schematicView = new oliver.schematic.SchematicView(EDITOR_CONTEXT, userProperties);
        editorTreeView = new oliver.tree.EditorTreeView(userProperties);
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane1 = new oliver.document.XmplEditorView(userProperties);
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        projectListView = new oliver.project.ProjectListView(EDITOR_CONTEXT, userProperties);
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newprojectMenuItem = new javax.swing.JMenuItem();
        newMenu = new javax.swing.JMenu();
        newAttributeTypeMenuItem = new javax.swing.JMenuItem();
        newComponentTypeMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        closeMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        undoMenuItem = new javax.swing.JMenuItem(undoAction);
        redoMenuItem = new javax.swing.JMenuItem(redoAction);
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();
        showundodebuglist = new javax.swing.JMenuItem();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jTabbedPane3.addTab("schematic", schematicView);

        jTabbedPane3.addTab("structure", editorTreeView);

        jSplitPane2.setTopComponent(jTabbedPane3);

        jScrollPane2.setViewportView(jEditorPane1);

        jTabbedPane2.addTab("source", jScrollPane2);

        jScrollPane1.setViewportView(jTextArea1);

        jTabbedPane2.addTab("Output", jScrollPane1);

        jSplitPane2.setBottomComponent(jTabbedPane2);

        jSplitPane1.setRightComponent(jSplitPane2);

        jSplitPane1.setLeftComponent(projectListView);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");
        newprojectMenuItem.setText("New Project");
        newprojectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newprojectMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(newprojectMenuItem);

        newMenu.setText("New");
        newAttributeTypeMenuItem.setAction(newAttributeTypeAction);
        newMenu.add(newAttributeTypeMenuItem);

        newComponentTypeMenuItem.setText("Item");
        newComponentTypeMenuItem.setAction(newComponentTypeAction);
        newMenu.add(newComponentTypeMenuItem);

        fileMenu.add(newMenu);

        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(openMenuItem);

        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);

        closeMenuItem.setText("Close");
        closeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(closeMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");
        editMenu.add(undoMenuItem);

        editMenu.add(redoMenuItem);

        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setText("Help");
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        showundodebuglist.setText("Show Undo Debug List");
        showundodebuglist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showundodebuglistActionPerformed(evt);
            }
        });

        helpMenu.add(showundodebuglist);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

    }//GEN-END:initComponents
    
    private javax.swing.DefaultListModel undolistmodel = new javax.swing.DefaultListModel();
    
    private void showundodebuglistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showundodebuglistActionPerformed
        // Add your handling code here:
        javax.swing.JList list = new javax.swing.JList(undolistmodel);
        javax.swing.JFrame frame = new javax.swing.JFrame();
        frame.getContentPane().setLayout(new java.awt.BorderLayout());
        frame.getContentPane().add(list, java.awt.BorderLayout.CENTER);
        frame.show();
    }//GEN-LAST:event_showundodebuglistActionPerformed
    
    private void closeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeMenuItemActionPerformed
        // Add your handling code here:
        if(projectChanged) {
            int option = javax.swing.JOptionPane.showConfirmDialog(this,"Save project before closing?", "Warning", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);
            if(option == javax.swing.JOptionPane.YES_OPTION) {
                if(file != null) {
                    saveMenuItemActionPerformed(evt);
                } else {
                    saveAsMenuItemActionPerformed(evt);
                }
            }
        }
        this.file = null;
        setTitle("");
        model.setRoot(null);
        checkFileMenuItems();
    }//GEN-LAST:event_closeMenuItemActionPerformed
    
    private void newprojectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newprojectMenuItemActionPerformed
        // Add your handling code here:
        javax.swing.JFileChooser fc = new javax.swing.JFileChooser(userProperties.getProperty(userProperties.CURRENT_DIRECTORY));
        java.io.File file2 = null;
        while(file2 == null || file2.exists()) {
            int returnVal = fc.showOpenDialog(this);
            if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
                closeMenuItemActionPerformed(evt);
                file2 = fc.getSelectedFile();
                String name = file2.getName();
                if(!name.endsWith(".smpl")) {
                    int i = name.lastIndexOf(".");
                    if(i > -1) {
                        name = name.substring(0,i);
                    }
                    name = name + ".smpl";
                    file2 = new java.io.File(file2.getParent()+userProperties.SLASH+name);
                }
                if(file2.exists()) {
                    int confirm = javax.swing.JOptionPane.showConfirmDialog(this, file.getAbsolutePath()+" exists, do you wish to over write it?","Warning", javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.WARNING_MESSAGE);
                    if(confirm == javax.swing.JOptionPane.NO_OPTION) {
                        break;
                    } else if(confirm == javax.swing.JOptionPane.YES_OPTION) {
                        file2.delete();
                    }
                }
                this.file = file2;
                setTitle(file.getAbsolutePath());
                oliver.xmpl.Project p = new oliver.xmpl.Project();
                p.setName("project");
                p.setAttribute("name",name);
                model.setRoot(p);
                projectChanged = false;
            } else if(returnVal == javax.swing.JFileChooser.CANCEL_OPTION) {
                break;
            }
        }
        checkFileMenuItems();
    }//GEN-LAST:event_newprojectMenuItemActionPerformed
    
    private void checkFileMenuItems() {
        if(model.getRoot() == null) {
            newAttributeTypeMenuItem.setEnabled(false);
            newComponentTypeMenuItem.setEnabled(false);
            saveAsMenuItem.setEnabled(false);
        } else {
            newAttributeTypeMenuItem.setEnabled(true);
            newComponentTypeMenuItem.setEnabled(true);
            saveAsMenuItem.setEnabled(true);
        }
        if(file == null) {
            saveMenuItem.setEnabled(false);
        } else {
            saveMenuItem.setEnabled(true);
        }
    }
    
    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        // Add your handling code here:
        try {
            javax.swing.JFileChooser fc = new javax.swing.JFileChooser(userProperties.getProperty(userProperties.CURRENT_DIRECTORY));
            if(file != null) fc.setSelectedFile(file);
            int returnVal = fc.showSaveDialog(this);
            if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
                java.io.File file = fc.getSelectedFile();
                String name = file.getName();
                if(!name.endsWith(".smpl")) {
                    int i = name.lastIndexOf(".");
                    if(i > -1) {
                        name = name.substring(0,i);
                    }
                    name = name + ".smpl";
                    file = new java.io.File(file.getParent()+userProperties.SLASH+name);
                }
                
                if(file.exists()) {
                    int confirm = javax.swing.JOptionPane.showConfirmDialog(this, "This file exists, do you wish to over write it?","Warning", javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.WARNING_MESSAGE);
                    if(confirm == javax.swing.JOptionPane.NO_OPTION) return;
                    file.delete();
                }
                java.io.FileOutputStream out = new java.io.FileOutputStream(file);
                net.n3.nanoxml.XMLWriter writer = new net.n3.nanoxml.XMLWriter(out);
                net.n3.nanoxml.XMLElement xml = new net.n3.nanoxml.XMLElement();
                xml.setName("xmpl");
                xml.setAttribute("xmlns:ci","http://www.w3.org/1999/XSL/Format");
                xml.addChild(model.getRoot());
                userProperties.setProperty(userProperties.CURRENT_MODEL_FILE,  file.getAbsolutePath());
                writer.write(xml,true);
                out.flush();
                out.close();
                projectChanged = false;
            }
        } catch(Exception e) {
            System.out.println(e);
        }
        checkFileMenuItems();
    }//GEN-LAST:event_saveAsMenuItemActionPerformed
    
    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // Add your handling code here:
        if(file == null || file.isDirectory()) saveAsMenuItemActionPerformed(evt);
        if(file.exists()) file.delete();
        try {
            java.io.FileOutputStream out = new java.io.FileOutputStream(file);
            net.n3.nanoxml.XMLWriter writer = new net.n3.nanoxml.XMLWriter(out);
            net.n3.nanoxml.XMLElement xml = new net.n3.nanoxml.XMLElement();
            xml.setName("xmpl");
            xml.setAttribute("xmlns:ci","http://www.w3.org/1999/XSL/Format");
            xml.addChild(model.getRoot());
            userProperties.setProperty(userProperties.CURRENT_DIRECTORY,  file.getParentFile().getAbsolutePath());
            userProperties.setProperty(userProperties.CURRENT_MODEL_FILE,  file.getAbsolutePath());
            writer.write(xml,true);
            out.flush();
            out.close();
            projectChanged = false;
        } catch(java.io.IOException e) {
            System.out.println(e);
        }
        checkFileMenuItems();
    }//GEN-LAST:event_saveMenuItemActionPerformed
    
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // Add your handling code here:
        closeMenuItemActionPerformed(evt);
        try {
            javax.swing.JFileChooser fc = new javax.swing.JFileChooser(userProperties.getProperty(userProperties.CURRENT_DIRECTORY));
            fc.setFileFilter(new javax.swing.filechooser.FileFilter() {
                public boolean accept(java.io.File f) {
                    if (f.isDirectory()) {
                        return true;
                    }
                    String extension = null;
                    String s = f.getName();
                    int i = s.lastIndexOf('.');
                    if (i > 0 &&  i < s.length() - 1) {
                        extension = s.substring(i+1).toLowerCase();
                    }
                    if (extension != null) {
                        if (extension.equals("smpl")) {
                            return true;
                        } else {
                            return false;
                        }
                    }
                    return false;
                }
                // The description of this filter
                public String getDescription() {
                    return "Livingstone source files";
                }
            });
            int returnVal = fc.showOpenDialog(this);
            if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
                java.io.File file2 = fc.getSelectedFile();
                setProjectFile(file2);
            }
        } catch(Exception e) {
            System.out.println(e);
        }
        checkFileMenuItems();
    }//GEN-LAST:event_openMenuItemActionPerformed
    
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        // Add your handling code here:
        if(projectChanged) {
            int option = javax.swing.JOptionPane.showConfirmDialog(this,"Save project before closing?", "Warning", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);
            if(option == javax.swing.JOptionPane.YES_OPTION) {
                if(file != null) {
                    saveMenuItemActionPerformed(evt);
                } else {
                    saveAsMenuItemActionPerformed(evt);
                }
            } else if(option == javax.swing.JOptionPane.CANCEL_OPTION) {
                return;
            }
        }
        this.file = null;
        setTitle("");
        model.setRoot(null);
        checkFileMenuItems();
        exitForm(null);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        userProperties.setInt(getApplicationName()+".splitPane1.dividerLocation",jSplitPane1.getDividerLocation());
        userProperties.setInt(getApplicationName()+".splitPane2.dividerLocation",jSplitPane2.getDividerLocation());
        exit();
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            new Editor().show();
        } catch(Exception e) {
            System.out.println(e);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem redoMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JMenuItem undoMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem newprojectMenuItem;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JPanel projectListView;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JPanel schematicView;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JMenu editMenu;
    private javax.swing.JPanel editorTreeView;
    private javax.swing.JMenuItem newComponentTypeMenuItem;
    private javax.swing.JMenuItem newAttributeTypeMenuItem;
    private javax.swing.JMenu newMenu;
    private javax.swing.JMenuItem showundodebuglist;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem closeMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    // End of variables declaration//GEN-END:variables
    
    
    
    // ************************************* non generated stuff ***************
    
    public void setProjectFile(java.io.File file) throws Exception {
        if(file == null || !file.exists() || file.isDirectory()) throw new Exception("Not a project file: "+file);
        this.file = file;
        userProperties.setProperty(userProperties.CURRENT_DIRECTORY,file.getParentFile().getAbsolutePath());
        userProperties.setProperty(userProperties.IMAGE_DIRECTORY,file.getParentFile().getAbsolutePath()+userProperties.SLASH+"images");
        userProperties.setProperty(userProperties.CURRENT_MODEL_FILE,  file.getAbsolutePath());
        net.n3.nanoxml.StdXMLBuilder builder = new net.n3.nanoxml.StdXMLBuilder(new oliver.xmpl.Xmpl());
        net.n3.nanoxml.IXMLParser parser = net.n3.nanoxml.XMLParserFactory.createDefaultXMLParser(builder);
        net.n3.nanoxml.IXMLReader reader = new net.n3.nanoxml.StdXMLReader(new java.io.FileReader(file));
        parser.setReader(reader);
        net.n3.nanoxml.IXMLElement xml = (net.n3.nanoxml.IXMLElement) parser.parse();
        while(!(xml instanceof oliver.xmpl.Project)) {
            xml = (net.n3.nanoxml.IXMLElement)xml.getChildren().firstElement();
        }
        if(xml != null && xml instanceof oliver.xmpl.Project) {
            model.setRoot((oliver.xmpl.Project)xml);
            setTitle(file.getAbsolutePath());
            projectChanged = false;
        } else {
            javax.swing.JOptionPane.showInternalMessageDialog(this, "This file does not contain a Project Element","Error", javax.swing.JOptionPane.WARNING_MESSAGE);
        }
    }
    
    public void everythingChanged(Object source, oliver.xmpl.Xmpl parent) {
        System.out.println("Editor.everythingChanged()");
    }
    
    public void log(String line) {
        jTextArea1.append(line);
    }
    
    private class UndoAction extends javax.swing.AbstractAction {
        public UndoAction() {
            super("Undo");
            setEnabled(false);
            putValue(ACCELERATOR_KEY,javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        }
        public void actionPerformed(java.awt.event.ActionEvent e) {
            try {
                undo.undo();
            } catch (javax.swing.undo.CannotUndoException ex) {
                System.out.println("Unable to undo: " + ex);
                ex.printStackTrace();
            }
            undoAction.updateUndoState();
            redoAction.updateRedoState();
        }
        public void updateUndoState() {
            if(undo.canUndo()) setEnabled(true);
            else setEnabled(false);
        }
    }
    
    private class RedoAction extends javax.swing.AbstractAction {
        public RedoAction() {
            super("Redo");
            setEnabled(false);
            putValue(ACCELERATOR_KEY,javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        }
        public void actionPerformed(java.awt.event.ActionEvent e) {
            try {
                undo.redo();
            } catch (javax.swing.undo.CannotUndoException ex) {
                System.out.println("Unable to redo: " + ex);
                ex.printStackTrace();
            }
            undoAction.updateUndoState();
            redoAction.updateRedoState();
        }
        public void updateRedoState() {
            if(undo.canRedo()) setEnabled(true);
            else setEnabled(false);
        }
    }
    
    
    /** An undoable edit happened
     */
    public void undoableEditHappened(javax.swing.event.UndoableEditEvent e) {
        // don't add undo triggered events to the stack
        if(e.getSource() instanceof oliver.project.ProjectModelUndoEvent) return;
        undo.addEdit(e.getEdit());
        undolistmodel.addElement(e.getEdit());
        undoAction.updateUndoState();
        redoAction.updateRedoState();
        projectChanged = true;
    }
    
    protected String getApplicationName() {
        return applicationName;
    }
    
    protected java.awt.Image getSplashImage() {
        return java.awt.Toolkit.getDefaultToolkit().getImage(getClass().getResource("/oliver/application/splash.gif"));
    }
    
    public class NewAttributeTypeAction extends javax.swing.AbstractAction {
        public NewAttributeTypeAction() {
            super("AttributeType");
        }
        public void actionPerformed(java.awt.event.ActionEvent e) {
            String name = "";
            while(name != null && !oliver.xmpl.Xmpl.isLegalName(name)) {
                name = javax.swing.JOptionPane.showInputDialog(Editor.this.userProperties.getRootComponent(), "Enter name of new AttributeType:");
                if(name != null && model.getRoot().findFirstNodeWithNameTag(name, model.getRoot().getChildren()) != null) name = null;
            }
            if(name != null) {
                model.addNewAttributeType(Editor.this, name);
            }
        }
    }
    
    public class NewComponentTypeAction extends javax.swing.AbstractAction {
        public NewComponentTypeAction() {
            super("ComponentType");
        }
        public void actionPerformed(java.awt.event.ActionEvent e) {
            String name = "";
            while(name != null && !oliver.xmpl.Xmpl.isLegalName(name)) {
                name = javax.swing.JOptionPane.showInputDialog(Editor.this.userProperties.getRootComponent(), "Enter name of new ComponentType:");
                if(name != null && model.getRoot().findFirstNodeWithNameTag(name, model.getRoot().getChildren()) != null) name = null;
            }
            if(name != null) {
                model.addNewComponentType(Editor.this, name);
            }
        }
    }
    
}

