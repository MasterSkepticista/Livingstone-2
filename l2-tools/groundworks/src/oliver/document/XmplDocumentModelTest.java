// 
// * See the file "l2-tools/disclaimers-and-notices.txt" for 
// * information on usage and redistribution of this file, 
// * and for a DISCLAIMER OF ALL WARRANTIES. 
// 

/*
 * XmplDocumentModelTest.java
 *
 * Created on September 13, 2002, 12:22 PM
 */

package oliver.document;

/**
 *
 * @author  stephen
 */
public class XmplDocumentModelTest extends javax.swing.JFrame {
    
    private String propertiesFileName = System.getProperty("user.home")+System.getProperty("file.separator")+".oliver";
    private java.util.Properties userProperties;
    private java.io.PrintStream logOut;
    
    /** Creates new form XmplDocumentModelTest */
    public XmplDocumentModelTest() {
        userProperties = openPropertiesFile(propertiesFileName);
        initComponents();
        logOut = new java.io.PrintStream(new java.io.OutputStream() {
            public void write(int b) {
                String s = String.valueOf((char)b);
                jTextArea1.append(s);
            }
        });
    }
    
    private java.util.Properties openPropertiesFile(String propertiesFileName) {
        java.util.Properties p = new java.util.Properties();
        try {
            java.io.FileInputStream in = new java.io.FileInputStream(propertiesFileName);
            p.load(in);
            this.propertiesFileName = propertiesFileName;
            return p;
        } catch(Exception e) {
            System.out.println(e);
            return p;
        }
    }
    
    public java.util.Properties getUserProperties() { return userProperties; }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        compileMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jEditorPane1.setDocument(new XmplDocumentModel(userProperties));
        jEditorPane1.setFont(new java.awt.Font("Courier New", 0, 12));
        jEditorPane1.setMinimumSize(new java.awt.Dimension(16, 16));
        jEditorPane1.setPreferredSize(new java.awt.Dimension(16, 16));
        jScrollPane1.setViewportView(jEditorPane1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jScrollPane2.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane2, java.awt.BorderLayout.SOUTH);

        fileMenu.setText("File");
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(openMenuItem);

        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setText("Save As ...");
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);

        compileMenuItem.setText("Item");
        compileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(compileMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setText("Help");
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }//GEN-END:initComponents
    
    private void compileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileMenuItemActionPerformed
        // Add your handling code here:
        try {
            //((XmplDocumentModel)jEditorPane1.getDocument()).updateXmpl(logOut);
            System.out.println("XmplDocumentModelTest.compileMenuItemActionPerformed() not implemented");
        } catch(Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_compileMenuItemActionPerformed
    
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // Add your handling code here:
        try {
            javax.swing.JFileChooser fc = new javax.swing.JFileChooser(getUserProperties().getProperty("currentDirectory"));
            int returnVal = fc.showOpenDialog(this);
            if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
                java.io.File file = fc.getSelectedFile();
                ((XmplDocumentModel)jEditorPane1.getDocument()).readXmplFile(file);
                getUserProperties().setProperty("currentDirectory",file.getParentFile().getAbsolutePath());
            }
        } catch(Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_openMenuItemActionPerformed
    
    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // Add your handling code here:
        final javax.swing.JFrame frame = (javax.swing.JFrame)evt.getComponent();
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                java.awt.Dimension d1 = frame.getContentPane().getSize();
                java.awt.Dimension d2 = new java.awt.Dimension((int)d1.getWidth(),(int)d1.getHeight()*2/3);
                java.awt.Dimension d3 = new java.awt.Dimension((int)d1.getWidth(),(int)d1.getHeight()/3);
                jScrollPane1.setPreferredSize(d2);
                jScrollPane2.setPreferredSize(d3);
                frame.pack();
            }
        });
    }//GEN-LAST:event_formComponentResized
    
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new XmplDocumentModelTest().show();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem compileMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenu helpMenu;
    // End of variables declaration//GEN-END:variables
    /** After changes have been made to the document this checks for errors and
     *  makes the changes to the xmpl tree.
     * public void compile(java.io.OutputStream logOut) {
     * if(xmplReflectsText) return;  // nothing to do
     * String currentDirectoryName = userProperties.getProperty("currentDirectory");
     * String compiledDirectoryName = userProperties.getProperty("compiledDirectoryName");
     * if(currentDirectoryName == null) currentDirectoryName = System.getProperty("user.home");
     * if(compiledDirectoryName == null) compiledDirectoryName = currentDirectoryName;
     * String fileName = root.getAttribute("name",null)+".xmpl";
     * java.io.File file = new java.io.File(compiledDirectoryName+System.getProperty("file.separator")+fileName);
     * while(file.exists()) {
     * Object[] options = {"Delete","Cancel","Options"};
     * int n = javax.swing.JOptionPane.showOptionDialog(component,"File "+file.getName()+" exist, would you like to delete it?"
     * ,"Warning",javax.swing.JOptionPane.OK_CANCEL_OPTION,javax.swing.JOptionPane.WARNING_MESSAGE,null,options,options[0]);
     * if(n == 0) {
     * file.delete();
     * break;
     * } else if(n == 1) {
     * return;
     * } else {
     * javax.swing.JFileChooser fc = new javax.swing.JFileChooser(file.getParentFile());
     * fc.setDialogTitle("Compiled file name");
     * fc.setName(fileName);
     * javax.swing.filechooser.FileFilter ff = new javax.swing.filechooser.FileFilter() {
     * public boolean accept(java.io.File f) {
     * if(f.isDirectory() || f.getName().endsWith(".xmpl")) return true;
     * else return false;
     * }
     * public String getDescription() { return "Compiled model file"; }
     * };
     * fc.setFileFilter(ff);
     * int n2 = fc.showDialog(component, "Compile");
     * if(n2 != fc.APPROVE_OPTION) return;
     * file = fc.getSelectedFile();
     * if(file.isDirectory()) file = new java.io.File(file, fileName);
     * compiledDirectoryName = file.getParentFile().getAbsolutePath();
     *
     * }
     * }
     * if(currentDirectoryName.equals(compiledDirectoryName)) {
     * userProperties.remove("compiledDirectoryName");
     * } else {
     * userProperties.setProperty("compiledDirectoryName",file.getParentFile().getAbsolutePath());
     * }
     * try {
     * compile(file, logOut);
     * logOut.flush();
     * } catch(Exception e) {
     * System.out.println(e);
     * }
     * }
     * };
     * return b;
     * }*/
}
