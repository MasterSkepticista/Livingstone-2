// 
// * See the file "l2-tools/disclaimers-and-notices.txt" for 
// * information on usage and redistribution of this file, 
// * and for a DISCLAIMER OF ALL WARRANTIES. 
// 

/*
 * ScenarioManager.java
 *
 * Created on December 11, 2002, 9:55 AM
 */

package oliver.scenario;

/**
 *
 * @author  stephen
 */
public class ScenarioManager extends javax.swing.JPanel {
    
    private int currentCommandLineNumber = 0;
    private livdll.LivingstoneCommand currentCommand = null;
    //private int nextCommandLineNumber = 0;
    //private livdll.LivingstoneCommand nextCommand = null;
    //private boolean breakpoint = false;
    private javax.swing.text.SimpleAttributeSet attributeSet = new javax.swing.text.SimpleAttributeSet();
    private livdll.EngineControlInterface engine = null;
    
    /** Creates new form ScenarioManager */
    public ScenarioManager() {
        initComponents();
        // want to stop the user from editing the pane
        editorPane.setCaret(new javax.swing.text.DefaultCaret() {
            public void focusLost(java.awt.event.FocusEvent e) {
                setVisible(false);
                //setSelectionVisible(ownsSelection || e.isTemporary());
            }
            public void mouseClicked(java.awt.event.MouseEvent e) {}
            public void mousePressed(java.awt.event.MouseEvent e) {}
            public void mouseReleased(java.awt.event.MouseEvent e) {}
            public void mouseDragged(java.awt.event.MouseEvent e) {}
        });
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        editorScrollPane = new javax.swing.JScrollPane();
        editorPane = new javax.swing.JEditorPane();
        senarioToolBar = new javax.swing.JToolBar();
        singleButton = new javax.swing.JButton();
        stepButton = new javax.swing.JButton();
        runButton = new javax.swing.JButton();
        warpButton = new javax.swing.JButton();
        resetButoon = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        editorPane.setEditable(false);
        editorPane.setFont(new java.awt.Font("Courier New", 0, 12));
        editorScrollPane.setViewportView(editorPane);

        add(editorScrollPane, java.awt.BorderLayout.CENTER);

        singleButton.setText("Single");
        singleButton.setEnabled(false);
        singleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleButtonActionPerformed(evt);
            }
        });

        senarioToolBar.add(singleButton);

        stepButton.setText("Step");
        stepButton.setEnabled(false);
        stepButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepButtonActionPerformed(evt);
            }
        });

        senarioToolBar.add(stepButton);

        runButton.setText("Run");
        runButton.setEnabled(false);
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        senarioToolBar.add(runButton);

        warpButton.setText("Warp");
        warpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                warpButtonActionPerformed(evt);
            }
        });

        senarioToolBar.add(warpButton);

        resetButoon.setText("Reset");
        resetButoon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButoonActionPerformed(evt);
            }
        });

        senarioToolBar.add(resetButoon);

        add(senarioToolBar, java.awt.BorderLayout.NORTH);

    }//GEN-END:initComponents
    
    private void warpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warpButtonActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_warpButtonActionPerformed
    
    private void resetButoonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButoonActionPerformed
        // Add your handling code here:
        try {
            livdll.LivingstoneCommand command = new livdll.LivingstoneCommand("restart");
            engine.parseCmd(command);
            currentCommandLineNumber = 0;
            setSelectedLine(currentCommandLineNumber);
            String line = getLine(currentCommandLineNumber);
            currentCommand = new livdll.LivingstoneCommand(line);
            updateButtons();
        } catch(livdll.L2Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_resetButoonActionPerformed
    
    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        // Add your handling code here:
        while(currentCommand!=null && !currentCommand.isBreakpoint()) {
            try {
                engine.parseCmd(currentCommand);
                updateButtons();
            } catch(livdll.L2Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_runButtonActionPerformed
    
    private void stepButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepButtonActionPerformed
        // Add your handling code here:
        boolean run = true;
        while(currentCommand!=null && !currentCommand.isBreakpoint() && run == true) {
            try {
                engine.parseCmd(currentCommand);
                if(currentCommand.getType()==currentCommand.FIND_CANDIDATES
                || currentCommand.getType()==currentCommand.PROPAGATE) run = false;
                updateButtons();
            } catch(livdll.L2Exception e) {
                System.out.println(e);
            }
        }
        
    }//GEN-LAST:event_stepButtonActionPerformed
    
    private void singleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleButtonActionPerformed
        // Add your handling code here:
        if(currentCommand != null) {
            try {
                engine.parseCmd(currentCommand);
                updateButtons();
            } catch(livdll.L2Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_singleButtonActionPerformed
    
    public void setEngineControl(livdll.EngineControlInterface engine) {
        this.engine = engine;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton resetButoon;
    private javax.swing.JToolBar senarioToolBar;
    private javax.swing.JButton stepButton;
    private javax.swing.JButton singleButton;
    private javax.swing.JScrollPane editorScrollPane;
    private javax.swing.JEditorPane editorPane;
    private javax.swing.JButton runButton;
    private javax.swing.JButton warpButton;
    // End of variables declaration//GEN-END:variables
    
    public void load(java.io.File file) throws java.io.IOException {
        javax.swing.text.PlainDocument doc = new javax.swing.text.PlainDocument();
        java.io.BufferedReader in = new java.io.BufferedReader(new java.io.FileReader(file));
        String line = in.readLine();
        while(line != null) {
            try {
                doc.insertString(doc.getLength(), line+"\n", attributeSet);
                line = in.readLine();
            } catch(javax.swing.text.BadLocationException e) {
                System.out.println(e);
            }
        }
        in.close();
        editorPane.setDocument(doc);
        currentCommandLineNumber = 0;
        setSelectedLine(currentCommandLineNumber);
        line = getLine(currentCommandLineNumber);
        currentCommand = new livdll.LivingstoneCommand(line);
        updateButtons();
    }
    
    private int getLineCount() {
        int n = 0;
        javax.swing.text.Document doc = editorPane.getDocument();
        if(doc != null && doc instanceof javax.swing.text.PlainDocument) {
            n = ((javax.swing.text.PlainDocument)doc).getDefaultRootElement().getElementCount();
        }
        return n;
    }
    
    private String getLine(int index) {
        String text = null;
        javax.swing.text.Document doc = editorPane.getDocument();
        if(doc != null && doc instanceof javax.swing.text.PlainDocument) {
            int max = ((javax.swing.text.PlainDocument)doc).getDefaultRootElement().getElementCount();
            if(index > -1 && index < max) {
                javax.swing.text.Element line = ((javax.swing.text.PlainDocument)doc).getDefaultRootElement().getElement(index);
                int start = line.getStartOffset();
                int end = line.getEndOffset();
                try {
                    text = ((javax.swing.text.PlainDocument)doc).getText(start, end-start);
                } catch(javax.swing.text.BadLocationException e) {
                    System.out.println(e);
                }
            }
        }
        return text;
    }
    
    private void setSelectedLine(int index) {
        int start = 0;
        int end = 0;
        javax.swing.text.Document doc = editorPane.getDocument();
        if(doc != null && doc instanceof javax.swing.text.PlainDocument) {
            int max = ((javax.swing.text.PlainDocument)doc).getDefaultRootElement().getElementCount();
            if(index > -1 && index < max) {
                javax.swing.text.Element line = ((javax.swing.text.PlainDocument)doc).getDefaultRootElement().getElement(index);
                start = line.getStartOffset();
                end = line.getEndOffset();
            }
        }
        if(start==end || start < 0 || end > editorPane.getDocument().getLength()) return;
        editorPane.grabFocus();
        editorPane.setCaretPosition(start);
        editorPane.moveCaretPosition(end);
    }
    
    // increases lineNumber pointer
    private livdll.LivingstoneCommand searchForNextUsableCommand() {
        livdll.LivingstoneCommand command = null;
        do {
            String line = getLine(currentCommandLineNumber);
            if(line!=null) {
                command = new livdll.LivingstoneCommand(line);
                setSelectedLine(currentCommandLineNumber);
                currentCommandLineNumber++;
            } else {
                command = null;
            }
        } while(command != null && command.getType()==command.COMMENT);
        return command;
    }
    
    // after changing the doc or the currentLineNumber call this
    // to update the buttons and the currentLine String
    private void updateButtons() {
        if(currentCommand!=null) {
            currentCommand = searchForNextUsableCommand();
        }
        if(currentCommand == null) {
            singleButton.setEnabled(false);
            stepButton.setEnabled(false);
            runButton.setEnabled(false);
            warpButton.setEnabled(false);
        } else {
            singleButton.setEnabled(true);
            stepButton.setEnabled(true);
            runButton.setEnabled(true);
            warpButton.setEnabled(false);
        }
    }
}
