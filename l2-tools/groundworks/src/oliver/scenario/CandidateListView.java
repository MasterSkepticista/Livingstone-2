// 
// * See the file "l2-tools/disclaimers-and-notices.txt" for 
// * information on usage and redistribution of this file, 
// * and for a DISCLAIMER OF ALL WARRANTIES. 
// 

/*
 * CandidateListView.java
 *
 * Created on August 1, 2002, 3:20 PM
 */

package oliver.scenario;

/**
 *
 * @author  stephen
 */
public class CandidateListView extends javax.swing.JPanel implements livdll.EngineListener, HistoryControlInterface.LivingstoneViewControlListener {
    
    private oliver.application.UserProperties userProperties;
    //private State state;
    private oliver.scenario.HistoryControlInterface livingstoneViewControl;
    
    /** Creates new form CandidateListView */
    public CandidateListView(oliver.application.UserProperties userProperties) {
        super();
        this.userProperties = userProperties;
        //this.state = new oliver.scenario.State(userProperties);
        initComponents();
        addLivingstoneViewControlListener(this);
        setLivingstoneViewControl((CandidatePanel)candidatePanel);
        updateCount(-1,0);
    }
    
    public void addLivingstoneViewControlListener(HistoryControlInterface.LivingstoneViewControlListener listener) {
        ((CandidatePanel)candidatePanel).addLivingstoneViewControlListener(listener);
    }
    
    private void updateCount(int index, int size) {
        count.setText(Integer.toString(index+1)+" of "+Integer.toString(size));
        if(index == -1 && size == 0) {
            ffwd.setEnabled(false);
            fwd.setEnabled(false);
            rew.setEnabled(false);
            rrew.setEnabled(false);
        } else if(index > size-2) {
            ffwd.setEnabled(false);
            fwd.setEnabled(false);
            rew.setEnabled(true);
            rrew.setEnabled(true);
        } else if(index < 1) {
            ffwd.setEnabled(true);
            fwd.setEnabled(true);
            rew.setEnabled(false);
            rrew.setEnabled(false);
        } else {
            ffwd.setEnabled(true);
            fwd.setEnabled(true);
            rew.setEnabled(true);
            rrew.setEnabled(true);
        }
    }
    
    //public State getCurrentState() {
    //    return state;
    //}
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        searchTerminationString = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        count = new javax.swing.JLabel();
        rrew = new javax.swing.JButton();
        rew = new javax.swing.JButton();
        fwd = new javax.swing.JButton();
        ffwd = new javax.swing.JButton();
        showUpdates = new javax.swing.JCheckBox();
        candidatePanel = new CandidatePanel();

        setLayout(new java.awt.BorderLayout());

        searchTerminationString.setFont(new java.awt.Font("Dialog", 0, 12));
        searchTerminationString.setText("searchTerminationString");
        add(searchTerminationString, java.awt.BorderLayout.SOUTH);

        jToolBar1.setMinimumSize(new java.awt.Dimension(0, 0));
        count.setMinimumSize(new java.awt.Dimension(60, 0));
        count.setPreferredSize(new java.awt.Dimension(60, 0));
        jToolBar1.add(count);

        rrew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oliver/tree/rrew1.gif")));
        rrew.setBorderPainted(false);
        rrew.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/oliver/tree/rrew2.gif")));
        rrew.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/oliver/tree/rrew3.gif")));
        rrew.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rrew.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/oliver/tree/rrew3.gif")));
        rrew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rrewActionPerformed(evt);
            }
        });

        jToolBar1.add(rrew);

        rew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oliver/tree/rew1.gif")));
        rew.setBorderPainted(false);
        rew.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/oliver/tree/rew2.gif")));
        rew.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/oliver/tree/rew3.gif")));
        rew.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rew.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/oliver/tree/rew3.gif")));
        rew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rewActionPerformed(evt);
            }
        });

        jToolBar1.add(rew);

        fwd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oliver/tree/fwd1.gif")));
        fwd.setBorderPainted(false);
        fwd.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/oliver/tree/fwd2.gif")));
        fwd.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/oliver/tree/fwd3.gif")));
        fwd.setMargin(new java.awt.Insets(0, 0, 0, 0));
        fwd.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/oliver/tree/fwd3.gif")));
        fwd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fwdActionPerformed(evt);
            }
        });

        jToolBar1.add(fwd);

        ffwd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oliver/tree/ffwd1.gif")));
        ffwd.setBorderPainted(false);
        ffwd.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/oliver/tree/ffwd2.gif")));
        ffwd.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/oliver/tree/ffwd3.gif")));
        ffwd.setMargin(new java.awt.Insets(0, 0, 0, 0));
        ffwd.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/oliver/tree/ffwd3.gif")));
        ffwd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ffwdActionPerformed(evt);
            }
        });

        jToolBar1.add(ffwd);

        showUpdates.setSelected(true);
        showUpdates.setText("show updates");
        showUpdates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showUpdatesActionPerformed(evt);
            }
        });

        jToolBar1.add(showUpdates);

        add(jToolBar1, java.awt.BorderLayout.NORTH);

        add(candidatePanel, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents

    private void showUpdatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showUpdatesActionPerformed
        // Add your handling code here:
        livingstoneViewControl.setShowTrailingCommands(showUpdates.isSelected());
    }//GEN-LAST:event_showUpdatesActionPerformed
    
    private void rrewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rrewActionPerformed
        // Add your handling code here:
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                livingstoneViewControl.rrew();
                updateCount(livingstoneViewControl.getFindCandidatesIndex(),livingstoneViewControl.getFindCandidatesSize());
            }
        });
    }//GEN-LAST:event_rrewActionPerformed
    
    private void rewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rewActionPerformed
        // Add your handling code here:
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                livingstoneViewControl.rew();
                updateCount(livingstoneViewControl.getFindCandidatesIndex(),livingstoneViewControl.getFindCandidatesSize());
            }
        });
    }//GEN-LAST:event_rewActionPerformed
    
    private void fwdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fwdActionPerformed
        // Add your handling code here:
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                livingstoneViewControl.fwd();
                updateCount(livingstoneViewControl.getFindCandidatesIndex(),livingstoneViewControl.getFindCandidatesSize());
            }
        });
    }//GEN-LAST:event_fwdActionPerformed
    
    private void ffwdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ffwdActionPerformed
        // Add your handling code here:
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                livingstoneViewControl.ffwd();
                updateCount(livingstoneViewControl.getFindCandidatesIndex(),livingstoneViewControl.getFindCandidatesSize());
            }
        });
    }//GEN-LAST:event_ffwdActionPerformed
    
    
    private void setSearchTerminationString(String s) {
        searchTerminationString.setText(s);
    }
    
    // *************************************************************************
    // *************************************************************************
    
    /** A progress command has been issued to the engine.
     *
     */
    public void echoCommand(Object source, livdll.LivingstoneCommand command) {
        livingstoneViewControl.addTrailingCommand(command, showUpdates.isSelected());
    }
    
    /** The C++ engine associated with this object has been deallocated.
     *
     */
    public void echoDestroyEngine(Object source) {
    }
    
    /** A findCandidates command has been issued to the engine.
     *
     */
    public void echoFindCandidates(Object source) {
    }
    
    /** A model has been loaded into the engine.
     *
     */
    public void echoLoadModel(Object source, String fileName, java.util.SortedSet attributes) {
    }
    
    /** An assign command has been issued to the engine.  The most recent assignment will be the *first* element of the recentAssignments property on the engine bean.  (The assignments go onto the list in reverse order.)
     *
     */
    public void echoMonitor(Object source, livdll.LivingstoneCommand command) {
        livingstoneViewControl.addTrailingCommand(command, showUpdates.isSelected());
    }
    
    /** A new C++ engine has been allocated for this object, possibly deallocating the previous engine.
     *
     */
    public void echoNewEngine(Object source, String search_method) {
        livingstoneViewControl.removeAllCandidates();
    }
    
    /** A propagate command has been issued to the engine.
     *
     */
    public void echoPropagate(Object source, boolean consistent, livdll.FindCandidates fc) {
        if(consistent && fc != null) livingstoneViewControl.updateLastFindCandidate(fc, true);
    }
    
    /** A findCandidates command has finished.
     *
     */
    public void replyFoundCandidates(Object source, livdll.FindCandidates fc) {
        ((CandidatePanel)candidatePanel).addFindCandidates(fc);
    }
        
    // *************************************************************************
    // *************************************************************************
        
    public void livingstoneViewControlListenerEvent(HistoryControlInterface.HistoryControlListenerEvent e) {
        updateCount(e.index,e.size);
    }

    // *************************************************************************
    // *************************************************************************
        
    /** Getter for property livingstoneViewControl.
     * @return Value of property livingstoneViewControl.
     *
     */
    public oliver.scenario.HistoryControlInterface getLivingstoneViewControl() {
        return this.livingstoneViewControl;
    }
    
    /** Setter for property livingstoneViewControl.
     * @param livingstoneViewControl New value of property livingstoneViewControl.
     *
     */
    public void setLivingstoneViewControl(oliver.scenario.HistoryControlInterface livingstoneViewControl) {
        this.livingstoneViewControl = livingstoneViewControl;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton rrew;
    private javax.swing.JPanel candidatePanel;
    private javax.swing.JButton rew;
    private javax.swing.JLabel searchTerminationString;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton fwd;
    private javax.swing.JButton ffwd;
    private javax.swing.JLabel count;
    private javax.swing.JCheckBox showUpdates;
    // End of variables declaration//GEN-END:variables
    
    
}
