// 
// * See the file "l2-tools/disclaimers-and-notices.txt" for 
// * information on usage and redistribution of this file, 
// * and for a DISCLAIMER OF ALL WARRANTIES. 
// 

/*
 * TypeListView.java
 *
 * Created on July 17, 2002, 11:25 AM
 */

package oliver.project;

/**
 *
 * @author  stephen
 */
public class ProjectListView extends javax.swing.JPanel implements oliver.project.ProjectListener {
    
    private ProjectModel model;
    private oliver.application.UserProperties userProperties;
    private int context;
    
    /** Creates new form TypeListView */
    public ProjectListView(int context, oliver.application.UserProperties userProperties) {
        super();
        this.userProperties = userProperties;
        initComponents();
        attributesList.setFont(null);
        componentsList.setFont(null);
        //attributesList.setDragEnabled(true);
        //componentsList.setDragEnabled(true);
        setTransferHandler(new javax.swing.TransferHandler("softSelectedXmpl"));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        attributesList = new javax.swing.JList(new SortedListModel());
        jScrollPane2 = new javax.swing.JScrollPane();
        componentsList = new javax.swing.JList(new SortedListModel());

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jScrollPane1.setBorder(new javax.swing.border.TitledBorder("Enumerations"));
        attributesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        attributesList.setCellRenderer(new ProjectListCellRenderer());
        attributesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                attributesListMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                attributesListMouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(attributesList);

        jSplitPane1.setTopComponent(jScrollPane1);

        jScrollPane2.setBorder(new javax.swing.border.TitledBorder("Components"));
        componentsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        componentsList.setCellRenderer(new ProjectListCellRenderer());
        componentsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                componentsListMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                componentsListMouseClicked(evt);
            }
        });

        jScrollPane2.setViewportView(componentsList);

        jSplitPane1.setRightComponent(jScrollPane2);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents
    
    private void componentsListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_componentsListMousePressed
        // Add your handling code here:
        if(evt.getClickCount() > 1) return;
        if(evt.isPopupTrigger() || (evt.getModifiers() & evt.BUTTON3_MASK)>0) return;
        Object obj = componentsList.getSelectedValue();
        if(obj != null && obj instanceof oliver.xmpl.Xmpl) {
            setSoftSelectedXmpl((oliver.xmpl.Xmpl)obj);
            javax.swing.TransferHandler th = getTransferHandler();
            th.exportAsDrag(this, evt, javax.swing.TransferHandler.COPY);
        }
    }//GEN-LAST:event_componentsListMousePressed
    
    private void attributesListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_attributesListMousePressed
        // Add your handling code here:
        if(evt.getClickCount() > 1) return;
        if(evt.isPopupTrigger() || (evt.getModifiers() & evt.BUTTON3_MASK)>0) return;
        Object obj = attributesList.getSelectedValue();
        if(obj != null && obj instanceof oliver.xmpl.Xmpl) {
            setSoftSelectedXmpl((oliver.xmpl.Xmpl)obj);
            javax.swing.TransferHandler th = getTransferHandler();
            th.exportAsDrag(this, evt, javax.swing.TransferHandler.COPY);
        }
    }//GEN-LAST:event_attributesListMousePressed
    
    private void attributesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_attributesListMouseClicked
        // Add your handling code here:
        java.awt.Point point = evt.getPoint();
        int i = attributesList.locationToIndex(point);
        if(i < 0) return;
        Object obj = attributesList.getModel().getElementAt(i);
        
        if(evt.isPopupTrigger() || (evt.getModifiers() & evt.BUTTON3_MASK)>0) {
            if(obj instanceof oliver.xmpl.Xmpl) {
                javax.swing.Action[] actions = ((oliver.xmpl.Xmpl)obj).getActions(context, userProperties);
                java.awt.Container con = attributesList;
                while(con != this) {
                    java.awt.Point p = con.getLocation();
                    point.translate(p.x, p.y);
                    con = con.getParent();
                }
                createPopupMenu(point, actions);
            }
        } else if(evt.getClickCount() > 1) {
            try {
                if(obj instanceof oliver.xmpl.Xmpl) {
                    ((oliver.xmpl.Xmpl)obj).selectXmplNode(this);
                }
            } catch(Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_attributesListMouseClicked
    
    private void componentsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_componentsListMouseClicked
        // Add your handling code here:
        java.awt.Point point = evt.getPoint();
        int i = componentsList.locationToIndex(point);
        if(i < 0) return;
        Object obj = componentsList.getModel().getElementAt(i);
        
        if(evt.isPopupTrigger() || (evt.getModifiers() & evt.BUTTON3_MASK)>0) {
            if(obj instanceof oliver.xmpl.Xmpl) {
                javax.swing.Action[] actions = ((oliver.xmpl.Xmpl)obj).getActions(context, userProperties);
                java.awt.Container con = componentsList;
                while(con != this) {
                    java.awt.Point p = con.getLocation();
                    point.translate(p.x, p.y);
                    con = con.getParent();
                }
                createPopupMenu(point, actions);
            }
        } else if(evt.getClickCount() > 1) {
            try {
                if(obj instanceof oliver.xmpl.Xmpl) {
                    ((oliver.xmpl.Xmpl)obj).selectXmplNode(this);
                }
            } catch(Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_componentsListMouseClicked
    
    private void createPopupMenu(java.awt.Point point, javax.swing.Action[] actions) {
        javax.swing.JPopupMenu menu = new javax.swing.JPopupMenu();
        if(actions != null && actions.length > 0) {
            for(int i = 0; i < actions.length; i++) {
                menu.add(actions[i]);
            }
        }
        menu.show(this, point.x, point.y);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList componentsList;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList attributesList;
    // End of variables declaration//GEN-END:variables
    
    /** Holds value of property softSelectedXmpl. */
    private oliver.xmpl.Xmpl softSelectedXmpl;
    
    public void setModel(ProjectModel model) {
        this.model = model;
        attributesList.setModel(new SortedListModel());
        componentsList.setModel(new SortedListModel());
    }
    
    /** An undoable edit happened
     *
     */
    public void undoableEditHappened(javax.swing.event.UndoableEditEvent e) {
        if(!(e.getEdit() instanceof oliver.project.ProjectModelUndoEvent)) return;
        oliver.project.ProjectModelUndoEvent event = (oliver.project.ProjectModelUndoEvent)e.getEdit();
        
        if(model.getRoot() == null) return;
        
        if(event.getType() == event.EVERYTHING_CHANGED) {
            setModel(model);  // effectively clears the contents of the lists
            java.util.Enumeration enum = model.getRoot().getChildren().elements();
            while(enum.hasMoreElements()) {
                Object obj = enum.nextElement();
                if(obj instanceof oliver.xmpl.AttributeType) {
                    ((oliver.project.SortedListModel)attributesList.getModel()).addElement(obj);
                } else if(obj instanceof oliver.xmpl.ComponentType) {
                    ((oliver.project.SortedListModel)componentsList.getModel()).addElement(obj);
                }
            }
            
        } else if(event.getType() == event.NODES_INSERTED) {
            oliver.xmpl.Xmpl child = event.getChild();
            if(child instanceof oliver.xmpl.AttributeType && event.getParent() == model.getRoot()) {
                ((oliver.project.SortedListModel)attributesList.getModel()).addElement(child);
            } else if(child instanceof oliver.xmpl.ComponentType && event.getParent() == model.getRoot()) {
                ((oliver.project.SortedListModel)componentsList.getModel()).addElement(child);
            }
            
        } else if(event.getType() == event.NODES_REMOVED) {
            oliver.xmpl.Xmpl child = event.getChild();
            if(child instanceof oliver.xmpl.AttributeType && event.getParent() == model.getRoot()) {
                ((oliver.project.SortedListModel)attributesList.getModel()).removeElement(child);
            } else if(child instanceof oliver.xmpl.ComponentType && event.getParent() == model.getRoot()) {
                ((oliver.project.SortedListModel)componentsList.getModel()).removeElement(child);
            }
            
        } else if(event.getType() == event.NODES_CHANGED) {
            oliver.xmpl.Xmpl node = event.getParent();
            if(node instanceof oliver.xmpl.AttributeType) {
                if(event.getName().equals("name")) {
                    ((SortedListModel)attributesList.getModel()).removeElement(node);
                    ((SortedListModel)attributesList.getModel()).addElement(node);
                }
                attributesList.repaint();
            } else if(node instanceof oliver.xmpl.ComponentType) {
                if(event.getName().equals("name")) {
                    ((SortedListModel)componentsList.getModel()).removeElement(node);
                    ((SortedListModel)componentsList.getModel()).addElement(node);
                }
                componentsList.repaint();
            }
            
        } else if(event.getType() == event.NODE_SELECTED) {
            oliver.xmpl.Xmpl node = event.getParent();
            if(node instanceof oliver.xmpl.AttributeType) {
                if(event.getSource()!=this) {
                    attributesList.setSelectedValue(node, true);
                }
                componentsList.clearSelection();
            } else if(node instanceof oliver.xmpl.ComponentType) {
                if(event.getSource()!=this) {
                    componentsList.setSelectedValue(node, true);
                }
                attributesList.clearSelection();
            }
        }
        
    }
    
    /** Getter for property softSelectedXmpl.
     * @return Value of property softSelectedXmpl.
     *
     */
    public oliver.xmpl.Xmpl getSoftSelectedXmpl() {
         return this.softSelectedXmpl;
    }
    
    /** Setter for property softSelectedXmpl.
     * @param softSelectedXmpl New value of property softSelectedXmpl.
     *
     */
    public void setSoftSelectedXmpl(oliver.xmpl.Xmpl softSelectedXmpl) {
        this.softSelectedXmpl = softSelectedXmpl;
    }
    
}
