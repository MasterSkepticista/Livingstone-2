//
// * See the file "l2-tools/disclaimers-and-notices.txt" for
// * information on usage and redistribution of this file,
// * and for a DISCLAIMER OF ALL WARRANTIES.
//

/*
 * EditorTreeView.java
 *
 * Created on August 1, 2002, 12:40 PM
 */

package oliver.tree;

/**
 *
 * @author  stephen
 */
public class EditorTreeView extends javax.swing.JPanel implements oliver.project.ProjectListener {
    
    private oliver.application.UserProperties userProperties;
    private oliver.tree.ComponentInstance componentInstance = null;
    private InstanceTreeTableModel instanceTreeTableModel;
    
    private oliver.project.ProjectModel model;
    
    /** Creates new form EditorTreeView */
    public EditorTreeView(oliver.application.UserProperties userProperties) {
        this.userProperties = userProperties;
        initComponents();
        instanceTreeTable.setDefaultRenderer(javax.swing.DefaultComboBoxModel.class, new MyComboBoxTableCellRenderer());
        MyComboBoxTableCellEditor tce = new MyComboBoxTableCellEditor();
        tce.addCellEditorListener(new MyCellEditorListener());
        instanceTreeTable.setDefaultEditor(javax.swing.DefaultComboBoxModel.class, tce);
    }
    
    class MyCellEditorListener implements javax.swing.event.CellEditorListener {
        public void editingCanceled(javax.swing.event.ChangeEvent e) {}
        public void editingStopped(javax.swing.event.ChangeEvent e) {
            System.out.println(e);
        }
    }
    
    public void setModel(oliver.project.ProjectModel model) {
        this.model = model;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        instanceTreeTable = new oliver.tree.treetable.JTreeTable();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jTextField1.setText("jTextField1");
        jPanel1.add(jTextField1, java.awt.BorderLayout.CENTER);

        jLabel1.setText("Search  ");
        jPanel1.add(jLabel1, java.awt.BorderLayout.WEST);

        add(jPanel1, java.awt.BorderLayout.NORTH);

        jScrollPane1.setViewportView(instanceTreeTable);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTable instanceTreeTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
    
    public void setComponentInstance(oliver.xmpl.Xmpl xmpl) throws Exception {
        if(xmpl == null) throw new Exception("EditorTreeView.setComponentInstance() xmpl is null");
        if(model == null) throw new Exception("EditorTreeView.setComponentInstance() model is null");
        if(xmpl instanceof oliver.xmpl.Project) {
            oliver.xmpl.Project p = (oliver.xmpl.Project)xmpl;
            String name = p.getAttribute("name", null);
            if(p != null) {
                if(name.endsWith(".jmpl")) name = name.substring(0,name.length()-5);
                xmpl = p.findType(name);
                if(p==null) throw new Exception("couldn't find component type "+name);
            }
        } if(xmpl instanceof oliver.xmpl.ComponentType) {
            setComponentInstance(new oliver.tree.ComponentInstance(model, (oliver.xmpl.ComponentType)xmpl));
        } else {
            throw new Exception("InstanceTreeTableView.setComponentInstance() wrong class: "+xmpl.getClass().toString());
        }
    }
    
    public void setComponentInstance(oliver.tree.ComponentInstance ci) throws Exception {
        this.componentInstance = ci;
        instanceTreeTableModel = new InstanceTreeTableModel(ci);
        ((oliver.tree.treetable.JTreeTable)instanceTreeTable).setTreeTableModel(instanceTreeTableModel);
    }
    
    public oliver.tree.ComponentInstance getComponentInstance() throws Exception {
        if(componentInstance == null) throw new Exception("InstanceTreeTableView.getComponentInstance() no root");
        else return componentInstance;
    }
    
    public java.util.Enumeration getVisibleDescendants() {
        javax.swing.JTree tree = ((oliver.tree.treetable.JTreeTable)instanceTreeTable).getTree();
        java.util.Vector v = new java.util.Vector();
        componentInstance.getVisibleNodes(tree, v);
        return v.elements();
    }
    
    public java.util.Enumeration getDescendants() {
        java.util.Vector v = new java.util.Vector();
        componentInstance.getNodes(v);
        return v.elements();
    }
    
    
    public void nodeInstanceVisible(Object source, oliver.xmpl.Xmpl node) {
        java.util.Enumeration enum = getDescendants();
        while(enum.hasMoreElements()) {
            javax.swing.tree.TreePath path = (javax.swing.tree.TreePath)enum.nextElement();
            if(((oliver.tree.Instance)path.getLastPathComponent()).getType().equals(node)) {
                ((oliver.tree.treetable.JTreeTable)instanceTreeTable).getTree().expandPath(path.getParentPath());
            }
        }
    }
    
    public void undoableEditHappened(javax.swing.event.UndoableEditEvent e) {
        if(!(e.getEdit() instanceof oliver.project.ProjectModelUndoEvent)) return;
        oliver.project.ProjectModelUndoEvent event = (oliver.project.ProjectModelUndoEvent)e.getEdit();
        
        if(event.getType() == event.EVERYTHING_CHANGED) {
            try {
                setComponentInstance(event.getParent());
            } catch(Exception ee) {
                System.out.println(ee);
            }
            
        } else if(event.getType() == event.NODE_SELECTED) {
            if(componentInstance == null) return;
            java.util.Enumeration enum = getVisibleDescendants();
            instanceTreeTable.clearSelection();
            while(enum.hasMoreElements()) {
                javax.swing.tree.TreePath path = (javax.swing.tree.TreePath)enum.nextElement();
                if(((oliver.tree.Instance)path.getLastPathComponent()).getType().equals(event.getParent())) {
                    int i = ((oliver.tree.treetable.JTreeTable)instanceTreeTable).getTree().getRowForPath(path);
                    instanceTreeTable.getSelectionModel().addSelectionInterval(i,i);
                }
            }
            
        } else if(event.getType() == event.NODE_INSTANCE_ROOT) {
            try {
                setComponentInstance(event.getParent());
            } catch(Exception ee) {
                System.out.println(ee);
            }
            
        } else if(event.getType() == event.NODES_INSERTED) {
            // see InstanceTreeView and ComponentInstance
            
        } else if(event.getType() == event.NODES_REMOVED) {
            
        } else if(event.getType() == event.NODES_CHANGED) {
            
        }
        
        
        
    }
    
}
