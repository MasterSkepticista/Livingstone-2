// 
// * See the file "l2-tools/disclaimers-and-notices.txt" for 
// * information on usage and redistribution of this file, 
// * and for a DISCLAIMER OF ALL WARRANTIES. 
// 

/*
 * InstanceTreeView.java
 *
 * Created on June 18, 2002, 11:00 AM
 */

package oliver.tree;

/**
 *
 * @author  stephen
 */
public class InstanceTreeView extends javax.swing.JPanel implements oliver.project.ProjectListener {
    
    private oliver.application.UserProperties userProperties;
    private oliver.project.ProjectModel model;
    
    /** Creates new form InstanceTreeView */
    public InstanceTreeView(oliver.application.UserProperties userProperties) {
        super();
        this.userProperties = userProperties;
        initComponents();
    }
    
    // genaric tree view should have a function that turns a dataobject to a treenode
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();

        setLayout(new java.awt.BorderLayout());

        jTree1.setCellRenderer(new InstanceTreeCellRenderer());
        jTree1.setToggleClickCount(-1);
        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree1MouseClicked(evt);
            }
        });

        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });

        jScrollPane1.setViewportView(jTree1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents
    
    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        // Add your handling code here:
    }//GEN-LAST:event_jTree1ValueChanged
    
    private void jTree1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MouseClicked
        // Add your handling code here:
        java.awt.Point point = evt.getPoint();
        javax.swing.tree.TreePath path = jTree1.getPathForLocation(point.x, point.y);
        if(evt.isPopupTrigger() || (evt.getModifiers() & evt.BUTTON3_MASK)>0) {
            if(path != null && path.getPathCount() > 0) {
                Object obj = path.getLastPathComponent();
                if(obj instanceof MyTreeNode) {
                    javax.swing.Action[] actions = ((MyTreeNode)obj).getActions(getRootPane(), userProperties);
                    createPopupMenu(point, actions);
                }
            }
        } else if(evt.getClickCount() > 1) {
            try {
                Object obj = jTree1.getSelectionPath();
                if(path != null) {
                    obj = ((javax.swing.tree.TreePath)obj).getLastPathComponent();
                    if(obj instanceof oliver.tree.Instance) {
                        oliver.xmpl.Xmpl xmpl = ((oliver.tree.Instance)obj).getType();
                        //xmpl.selectXmplNode(this);
                    }
                }
            } catch(Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_jTree1MouseClicked
    
    private void createPopupMenu(java.awt.Point point, javax.swing.Action[] actions) {
        javax.swing.JPopupMenu menu = new javax.swing.JPopupMenu();
        if(actions != null && actions.length > 0) {
            for(int i = 0; i < actions.length; i++) {
                menu.add(actions[i]);
            }
        }
        menu.show(this, point.x, point.y);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
    
    public void setModel(oliver.project.ProjectModel model) {
        this.model = model;
    }
    
    public void setComponentInstance(String fullname, String type) throws Exception {
        if(model == null) throw new Exception("InstanceTreeView.setComponentInstance() no project model");
        if(type.endsWith(".jmpl")) type = type.substring(0, type.length()-5);
        oliver.xmpl.Xmpl xmpl = model.getRoot().findType(type);
        if(xmpl == null) throw new Exception("InstanceTreeView.setComponentInstance() can not find type: "+type);
        if(xmpl instanceof oliver.xmpl.ComponentType) {
            setComponentInstance(new oliver.tree.ComponentInstance(model, (oliver.xmpl.ComponentType)xmpl));
        } else {
            throw new Exception("InstanceTreeView.setComponentInstance() can't make instance of: "+type);
        }
    }
    
    public oliver.tree.ComponentInstance getComponentInstance() throws Exception {
        Object root = jTree1.getModel().getRoot();
        if(root != null && root instanceof oliver.tree.ComponentInstance) {
            return (oliver.tree.ComponentInstance)root;
        } else {
            throw new Exception("InstanceTreeView.getComponentInstance() root not ComponentInstance");
        }
    }
    
    public void setComponentInstance(oliver.tree.ComponentInstance ci) throws Exception {
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(ci));
        //((javax.swing.border.TitledBorder)getBorder()).setTitle(ci.getType().getAttribute("name","######"));
        model.addUndoableEditListener(this);
    }
    
    public void undoableEditHappened(javax.swing.event.UndoableEditEvent e) {
        if(!(e.getEdit() instanceof oliver.project.ProjectModelUndoEvent)) return;
        oliver.project.ProjectModelUndoEvent event = (oliver.project.ProjectModelUndoEvent)e.getEdit();
        if(event.getType() == event.EVERYTHING_CHANGED) {
        } else if(event.getType() == event.NODES_CHANGED) {
        } else if(event.getType() == event.NODES_INSERTED) {
            int[] i = new int[1];
            try {
                oliver.tree.Instance[] ins = getComponentInstance().findInstancesForType(event.getParent());
                oliver.xmpl.Xmpl child = event.getChild();
                oliver.xmpl.Xmpl parent = event.getParent();
                if(ins.length > 0 && child instanceof oliver.xmpl.Attribute) {
                    oliver.xmpl.Attribute att = (oliver.xmpl.Attribute)child;
                    i[0] = ins[0].findInsertChildIndexForAtt(child);
                    if(i[0] > -1) {
                        for(int ii = 0; ii < ins.length; ii++) {
                            oliver.tree.Instance instance = oliver.tree.Instance.createInstance(ins[ii].getModel(),parent,att);
                            ins[ii].insert(instance,i[0]);
                            ((javax.swing.tree.DefaultTreeModel)jTree1.getModel()).nodesWereInserted(ins[ii],i);
                        }
                    }
                }
            } catch(Exception ee) {
                System.out.println(ee);
            }
        } else if(event.getType() == event.NODES_REMOVED) {
            int[] i = new int[1];
            Object[] c = new Object[1];
            try {
                oliver.tree.Instance[] ins = getComponentInstance().findInstancesForType(event.getParent());
                if(ins.length > 0) {
                    i[0] = ins[0].findRemoveChildIndexForAtt(event.getChild());
                    if(i[0] > -1) {
                        for(int ii = 0; ii < ins.length; ii++) {
                            c[0] = ins[ii].getChildAt(i[0]);
                            ins[ii].remove(i[0]);
                            ((javax.swing.tree.DefaultTreeModel)jTree1.getModel()).nodesWereRemoved(ins[ii],i,c);
                        }
                    }
                }
            } catch(Exception ee) {
                System.out.println(ee);
            }
        } else if(event.getType() == event.NODE_SELECTED) {
            if(event.getSource() == this) return;
            try {
                oliver.tree.Instance[] ins = getComponentInstance().findInstancesForType(event.getParent());
                java.util.Vector v = new java.util.Vector();
                if(ins.length > 0) {
                    for(int i = 0; i < ins.length; i++) {
                        javax.swing.tree.TreeNode[] path = ins[i].getPath();
                        if(path != null) v.add(new javax.swing.tree.TreePath(path));
                    }
                    javax.swing.tree.TreePath[] paths = new javax.swing.tree.TreePath[v.size()];
                    v.copyInto(paths);
                    jTree1.setSelectionPaths(paths);
                }
            } catch(Exception ee) {
                System.out.println(ee);
            }
        }
    }
    
    
    
    
}
