//
// * See the file "l2-tools/disclaimers-and-notices.txt" for 
// * information on usage and redistribution of this file, 
// * and for a DISCLAIMER OF ALL WARRANTIES.
//
/* Generated by Together */
  
package gov.nasa.arc.l2tools.tools;

import livdll.*;
import java.util.SortedSet;
import java.util.Collection;
import java.util.Vector;

public interface ScenarioInterface {

  /** clean up the implementing classes resources so gc will take place. */
  public void cleanup();
  



  // These functions alter the state of the engine, and produce events that inform the tools the request was made.
  // They will usually be called in their own thread, and will lock the engine until finished.

  public void newEngine(Object source, String search_method, int max_candidate_classes_returned, int max_candidates_returned, int max_candidates_searched, int max_cutoff_weight, int max_history_steps, int max_trajectories_tracked, String progress_cmd_type, String fc_cmd_type) throws IllegalArgumentException, livdll.L2NativeException;
  
  public void destroyEngine(Object source) throws L2NativeException;

  public LivingstoneEngine2 getEngine();

  public void loadModel(Object source, String filename) throws L2NativeException, java.io.IOException ;
  
  public void minProgress(Object source, String command) throws L2NativeException;
  
  public void fullProgress(Object source, String command) throws L2NativeException;
  
  public void assign(Object source, String monitor) throws L2NativeException;
  
  public void unassign(Object source, String monitor) throws L2NativeException;
  
  /** Since this is a fast call, the boolean value is returned to the caller and echoed.
   *  I'm assuming I won't need to start a thread to do this, so I might as well return
   *  the value */
  public boolean propagate(Object source) throws L2NativeException;

  /** produces and echo before entering L2, and then a foundCandidate event when finished.*/
  public void findCandidates(Object source, String command) throws L2NativeException;
  



  // They block and return quickly.  They don't fire events, the just return the value.
  
  public AttributeAssignment[][] getAttributeAssignments(Object source, Candidate c) throws IndexOutOfBoundsException, L2NativeException;
  
  public AttributeAssignment[][] getAttributeAssignments2(Object source, Candidate c, Collection names) throws IndexOutOfBoundsException, L2NativeException;
  
  public Candidate[] getCandidates() throws L2NativeException;

  public Candidate[] getCandidateClasses() throws L2NativeException;

  public int getCandidateCount() throws L2NativeException;
  
  public Vector getDiscrepancys() throws L2NativeException;
  
  public String getSearchTermination() throws L2NativeException;
  
  public int[] getHistoryStartStop() throws L2NativeException;
  
  public void execWarpCommands(String commands) throws L2NativeException;
  
  public boolean parseCmd (String cmd, String args) throws L2NativeException;
  
  public void listenerUsage() throws  L2NativeException;
  
  public LivingstoneEngine2.PropValueResponse getPropValue(String propName) throws L2NativeException;

  public LivingstoneEngine2.JustificationStruct justificationStruct(String propname) throws L2NativeException;

  public String variableValueAtTime(String vname, int time) throws L2NativeException;

  public Attribute[] getAttributes(Object source, boolean clearCache) throws L2NativeException;

  public SortedSet getAttributeNames(Object source) throws L2NativeException;

  public boolean restoreCheckpoint(Object source, String name) throws L2NativeException;
  
  // JNI testing only
  public SortedSet getCommandAttributeNames(Object source) throws L2NativeException;

  // JNI testing only
  public SortedSet getObservableAttributeNames(Object source) throws L2NativeException;

  // JNI testing only
  public boolean setAttributeMode(Object source, String args) throws L2NativeException;
  
  // JNI testing only
  public void createCheckpoint(Object source, String name) throws L2NativeException;
  
  // JNI testing only
  public void deleteCheckpoint(Object source, String name) throws L2NativeException;
  
  // JNI testing only
  public void addAssumption(Object source, String name) throws L2NativeException;
  
  public void updateCandidates() throws L2NativeException;

}




