package LivingstoneCorba;


/**
* LivingstoneCorba/_LivingstoneCommandLineImplBase.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from LivingstoneCorba.idl
* Thursday, April 20, 2006 4:53:49 PM PDT
*/

public abstract class _LivingstoneCommandLineImplBase extends org.omg.CORBA.portable.ObjectImpl
                implements LivingstoneCorba.LivingstoneCommandLine, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors
  public _LivingstoneCommandLineImplBase ()
  {
  }

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("command", new java.lang.Integer (0));
    _methods.put ("getHistoryTimes", new java.lang.Integer (1));
    _methods.put ("enableGUIUpdate", new java.lang.Integer (2));
    _methods.put ("disableGUIUpdate", new java.lang.Integer (3));
    _methods.put ("warpCommands", new java.lang.Integer (4));
    _methods.put ("release", new java.lang.Integer (5));
    _methods.put ("addLivingstoneEventListener", new java.lang.Integer (6));
    _methods.put ("removeLivingstoneEventListener", new java.lang.Integer (7));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // LivingstoneCorba/LivingstoneCommandLine/command
       {
         String command = in.read_string ();
         // print command to L2Tools cmd line
         System.out.println(command);
         this.command (command);
         // reissue prompt
         System.out.print("======> ");
         out = $rh.createReply();
         break;
       }

       case 1:  // LivingstoneCorba/LivingstoneCommandLine/getHistoryTimes
       {
         try {
           String $result = null;
           $result = this.getHistoryTimes ();
           out = $rh.createReply();
           out.write_string ($result);
         } catch (LivingstoneCorba.LivingstoneException $ex) {
           out = $rh.createExceptionReply ();
           LivingstoneCorba.LivingstoneExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 2:  // LivingstoneCorba/LivingstoneCommandLine/enableGUIUpdate
       {
         this.enableGUIUpdate ();
         out = $rh.createReply();
         break;
       }

       case 3:  // LivingstoneCorba/LivingstoneCommandLine/disableGUIUpdate
       {
         this.disableGUIUpdate ();
         out = $rh.createReply();
         break;
       }


  // commands separated by \n
       case 4:  // LivingstoneCorba/LivingstoneCommandLine/warpCommands
       {
         String commands = in.read_string ();
         this.warpCommands (commands);
         out = $rh.createReply();
         break;
       }

       case 5:  // LivingstoneCorba/LivingstoneCommandLine/release
       {
         this.release ();
         out = $rh.createReply();
         break;
       }


  // this should be called finalize
       case 6:  // LivingstoneCorba/LivingstoneCommandLine/addLivingstoneEventListener
       {
         try {
           LivingstoneCorba.LivingstoneEventListener listener = LivingstoneCorba.LivingstoneEventListenerHelper.read (in);
           this.addLivingstoneEventListener (listener);
           out = $rh.createReply();
         } catch (LivingstoneCorba.LivingstoneException $ex) {
           out = $rh.createExceptionReply ();
           LivingstoneCorba.LivingstoneExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 7:  // LivingstoneCorba/LivingstoneCommandLine/removeLivingstoneEventListener
       {
         try {
           LivingstoneCorba.LivingstoneEventListener listener = LivingstoneCorba.LivingstoneEventListenerHelper.read (in);
           this.removeLivingstoneEventListener (listener);
           out = $rh.createReply();
         } catch (LivingstoneCorba.LivingstoneException $ex) {
           out = $rh.createExceptionReply ();
           LivingstoneCorba.LivingstoneExceptionHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:LivingstoneCorba/LivingstoneCommandLine:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }


} // class _LivingstoneCommandLineImplBase
