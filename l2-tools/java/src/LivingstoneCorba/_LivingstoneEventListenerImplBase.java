package LivingstoneCorba;


/**
* LivingstoneCorba/_LivingstoneEventListenerImplBase.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from LivingstoneCorba.idl
* Thursday, April 20, 2006 4:53:49 PM PDT
*/

public abstract class _LivingstoneEventListenerImplBase extends org.omg.CORBA.portable.ObjectImpl
                implements LivingstoneCorba.LivingstoneEventListener, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors
  public _LivingstoneEventListenerImplBase ()
  {
  }

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("start", new java.lang.Integer (0));
    _methods.put ("reportVariables", new java.lang.Integer (1));
    _methods.put ("newState", new java.lang.Integer (2));
    _methods.put ("viewState", new java.lang.Integer (3));
    _methods.put ("asynchronousMsg", new java.lang.Integer (4));
    _methods.put ("finish", new java.lang.Integer (5));
    _methods.put ("startReplay", new java.lang.Integer (6));
    _methods.put ("finishReplay", new java.lang.Integer (7));
    _methods.put ("gotCandidates", new java.lang.Integer (8));
    _methods.put ("gotInstallCandidate", new java.lang.Integer (9));
    _methods.put ("gotAssignment", new java.lang.Integer (10));
    _methods.put ("gotProgress", new java.lang.Integer (11));
    _methods.put ("getModules", new java.lang.Integer (12));
    _methods.put ("loadModule", new java.lang.Integer (13));
    _methods.put ("getWorkSpaces", new java.lang.Integer (14));
    _methods.put ("loadWorkSpace", new java.lang.Integer (15));
    _methods.put ("metaDot", new java.lang.Integer (16));
    _methods.put ("getInstances", new java.lang.Integer (17));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // LivingstoneCorba/LivingstoneEventListener/start
       {
         this.start ();
         out = $rh.createReply();
         break;
       }


  // void setScenarioTrace(ScenarioTrace trace)
       case 1:  // LivingstoneCorba/LivingstoneEventListener/reportVariables
       {
         LivingstoneCorba.LivingstoneAttributeReport attributes = LivingstoneCorba.LivingstoneAttributeReportHelper.read (in);
         this.reportVariables (attributes);
         out = $rh.createReply();
         break;
       }

       case 2:  // LivingstoneCorba/LivingstoneEventListener/newState
       {
         float time = in.read_float ();
         int stateID = in.read_long ();
         String transition = in.read_string ();
         LivingstoneCorba.LivingstoneAssignmentReport assignments = LivingstoneCorba.LivingstoneAssignmentReportHelper.read (in);
         this.newState (time, stateID, transition, assignments);
         out = $rh.createReply();
         break;
       }

       case 3:  // LivingstoneCorba/LivingstoneEventListener/viewState
       {
         float time = in.read_float ();
         int stateID = in.read_long ();
         String transition = in.read_string ();
         LivingstoneCorba.LivingstoneAssignmentReport assignments = LivingstoneCorba.LivingstoneAssignmentReportHelper.read (in);
         this.viewState (time, stateID, transition, assignments);
         out = $rh.createReply();
         break;
       }

       case 4:  // LivingstoneCorba/LivingstoneEventListener/asynchronousMsg
       {
         short state = in.read_short ();
         String msg = in.read_string ();
         this.asynchronousMsg (state, msg);
         out = $rh.createReply();
         break;
       }


  //void mapOver(Object parent, int depth, MapOverClosure arg);
       case 5:  // LivingstoneCorba/LivingstoneEventListener/finish
       {
         this.finish ();
         out = $rh.createReply();
         break;
       }

       case 6:  // LivingstoneCorba/LivingstoneEventListener/startReplay
       {
         this.startReplay ();
         out = $rh.createReply();
         break;
       }

       case 7:  // LivingstoneCorba/LivingstoneEventListener/finishReplay
       {
         this.finishReplay ();
         out = $rh.createReply();
         break;
       }


  // OUT
       case 8:  // LivingstoneCorba/LivingstoneEventListener/gotCandidates
       {
         int num = in.read_long ();
         this.gotCandidates (num);
         out = $rh.createReply();
         break;
       }


  //	void gotCurrentHistory(History);
       case 9:  // LivingstoneCorba/LivingstoneEventListener/gotInstallCandidate
       {
         int index = in.read_long ();
         this.gotInstallCandidate (index);
         out = $rh.createReply();
         break;
       }

       case 10:  // LivingstoneCorba/LivingstoneEventListener/gotAssignment
       {
         String monitor = in.read_string ();
         this.gotAssignment (monitor);
         out = $rh.createReply();
         break;
       }

       case 11:  // LivingstoneCorba/LivingstoneEventListener/gotProgress
       {
         String command = in.read_string ();
         this.gotProgress (command);
         out = $rh.createReply();
         break;
       }


  // return list of schematic modules, loadable by Stanley
       case 12:  // LivingstoneCorba/LivingstoneEventListener/getModules
       {
         String $result = null;
         $result = this.getModules ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  // load Stanley schematic module for use by metaDot
       case 13:  // LivingstoneCorba/LivingstoneEventListener/loadModule
       {
         String moduleName = in.read_string ();
         this.loadModule (moduleName);
         out = $rh.createReply();
         break;
       }


  // return list of workspaces, loadable by Stanley
       case 14:  // LivingstoneCorba/LivingstoneEventListener/getWorkSpaces
       {
         String $result = null;
         $result = this.getWorkSpaces ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  // load Stanley workspace for use by getModules, loadModule
       case 15:  // LivingstoneCorba/LivingstoneEventListener/loadWorkSpace
       {
         String workspace = in.read_string ();
         this.loadWorkSpace (workspace);
         out = $rh.createReply();
         break;
       }


  // Open Stanley to desired instance & dialog
       case 16:  // LivingstoneCorba/LivingstoneEventListener/metaDot
       {
         String nodeClassType = in.read_string ();
         String instanceName = in.read_string ();
         String dialogType = in.read_string ();
         String modeName = in.read_string ();
         this.metaDot (nodeClassType, instanceName, dialogType, modeName);
         out = $rh.createReply();
         break;
       }


  // return list of instance names of the requested class type
       case 17:  // LivingstoneCorba/LivingstoneEventListener/getInstances
       {
         String nodeClassType = in.read_string ();
         String componentInstanceName = in.read_string ();
         String $result = null;
         $result = this.getInstances (nodeClassType, componentInstanceName);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:LivingstoneCorba/LivingstoneEventListener:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }


} // class _LivingstoneEventListenerImplBase
