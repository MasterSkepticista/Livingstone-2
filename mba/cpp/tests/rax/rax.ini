<?xml version="1.0"?>
<!--  An MPL initialization is simply a set of assignments that must be asserted at startup -->
<!--  We may want to expand it to include any clause, but for the moment using only -->
<!--  assignments make the structure of the code somewhat cleaner.  -->
<!DOCTYPE  mplInit[
<!ELEMENT mplInit (assign*) >
<!ATTLIST mplInit
    name NMTOKEN #IMPLIED
    version CDATA  #IMPLIED
    doc  CDATA #IMPLIED>

<!ELEMENT assign EMPTY>
<!ATTLIST assign
    eq CDATA #REQUIRED
    datum CDATA #IMPLIED>
]>
<mplInit name="rax" version="1.00">
  <assign eq="dynamicsA.mode=normal"/>
  <assign eq="acsA.mode=rcs"/>
  <assign eq="acsA.rcsMode.mode=rcsXForY"/>
  <assign eq="rcsA.paletteD.zThruster.mode=ok"/>
  <assign eq="rcsA.paletteD.xThruster.mode=ok"/>
  <assign eq="rcsA.paletteD.zThrstrValve.mode=openOrClosed"/>
  <assign eq="rcsA.paletteD.xThrstrValve.mode=openOrClosed"/>
  <assign eq="rcsA.paletteC.zThruster.mode=ok"/>
  <assign eq="rcsA.paletteC.xThruster.mode=ok"/>
  <assign eq="rcsA.paletteC.zThrstrValve.mode=openOrClosed"/>
  <assign eq="rcsA.paletteC.xThrstrValve.mode=openOrClosed"/>
  <assign eq="rcsA.paletteB.zThruster.mode=ok"/>
  <assign eq="rcsA.paletteB.xThruster.mode=ok"/>
  <assign eq="rcsA.paletteB.zThrstrValve.mode=openOrClosed"/>
  <assign eq="rcsA.paletteB.xThrstrValve.mode=openOrClosed"/>
  <assign eq="rcsA.paletteA.zThruster.mode=ok"/>
  <assign eq="rcsA.paletteA.xThruster.mode=ok"/>
  <assign eq="rcsA.paletteA.zThrstrValve.mode=openOrClosed"/>
  <assign eq="rcsA.paletteA.xThrstrValve.mode=openOrClosed"/>
  <assign eq="hydrazineTank.mode=nonEmpty"/>
  <assign eq="sdstA.rt.mode=nominal"/>
  <assign eq="gdeA.rt.mode=nominal"/>
  <assign eq="sruA.rt.mode=nominal"/>
  <assign eq="sruA.mode=nominal"/>
  <assign eq="pdeA.rt.mode=nominal"/>
  <assign eq="pdeA.mode=nominal"/>
  <assign eq="lpeA.rt.mode=nominal"/>
  <assign eq="ipsA.rt.mode=nominal"/>
  <assign eq="ipsA.mode=safe"/>
  <assign eq="pduA.rt.mode=nominal"/>
  <assign eq="pduA.neb3Current.mode=nominal"/>
  <assign eq="pduA.neb2Current.mode=nominal"/>
  <assign eq="pduA.neb1sCurrent.mode=nominal"/>
  <assign eq="pduA.neb1Current.mode=nominal"/>
  <assign eq="fsc_ips_ppu_hv_sw1.statusThrow.mode=nominal"/>
  <assign eq="fsc_ips_ppu_hv_sw1.powerThrow.mode=on"/>
  <assign eq="fsc_cam_elec_sw1.statusThrow.mode=nominal"/>
  <assign eq="fsc_cam_elec_sw1.powerThrow.mode=off"/>
  <assign eq="fsc_pasm_sw1.statusThrow.mode=nominal"/>
  <assign eq="fsc_pasm_sw1.powerThrow.mode=off"/>
  <assign eq="fsc_ppu_lv_sw1.statusThrow.mode=nominal"/>
  <assign eq="fsc_ppu_lv_sw1.powerThrow.mode=on"/>
  <assign eq="fsc_dciu_sw1.statusThrow.mode=nominal"/>
  <assign eq="fsc_dciu_sw1.powerThrow.mode=on"/>
  <assign eq="fsc_dciu_valv_sw1.statusThrow.mode=nominal"/>
  <assign eq="fsc_dciu_valv_sw1.powerThrow.mode=on"/>
  <assign eq="acs_pde_sw1.statusThrow.mode=nominal"/>
  <assign eq="acs_pde_sw1.powerThrow.mode=on"/>
  <assign eq="acs_ast_sw1.statusThrow.mode=nominal"/>
  <assign eq="acs_ast_sw1.powerThrow.mode=on"/>
  <assign eq="fsc_pdu_neb2_sw1.statusThrow.mode=nominal"/>
  <assign eq="fsc_pdu_neb2_sw1.powerThrow.mode=on"/>
  <assign eq="fsc_pdu_neb1_s_sw1.statusThrow.mode=nominal"/>
  <assign eq="fsc_pdu_neb1_s_sw1.powerThrow.mode=on"/>
  <assign eq="fsc_pdu_neb1_sw1.statusThrow.mode=nominal"/>
  <assign eq="fsc_pdu_neb1_sw1.powerThrow.mode=on"/>
  <assign eq="pduA.neb2.mode=nominal"/>
  <assign eq="pduA.neb1.mode=nominal"/>
  <assign eq="pduA.neb1s.mode=nominal"/>
  <assign eq="bcA.mode=nominal"/>
  <assign eq="scPower.mode=nominal"/>
</mplInit>
