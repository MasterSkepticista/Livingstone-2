// this code is automatically generated by Stanley VJMPL

class srValues {
signValues sign;
relativeValues rel;
// abstraction method
/// (and (not (sr-values-equal ?from ?to ))
///        (or (sign-values-less-than (sign ?from ) (sign ?to ))
/// 	   (and (s-equal (sign ?from ) (sign ?to ))
/// 		(relative-values-less-than (rel ?from ) (rel ?to )))
/// 	   ))
relation lessThan ( srValues to ) {
(sign.signValuesLessThan(to.sign)) |
((sign = to.sign) & 
 rel.relativeValuesLessThan(to.rel));
}
// abstraction method
/// (and (not (sr-values-equal ?from ?to ))
///        (or (sign-values-more-than (sign ?from ) (sign ?to ))
/// 	   (and (s-equal (sign ?from ) (sign ?to ))
/// 		(relative-values-more-than (rel ?from ) (rel ?to )))
/// 	   ))
relation moreThan ( srValues to ) {
sign.signValuesMoreThan(to.sign) |
((sign = to.sign) &
 rel.relativeValuesMoreThan(to.rel));
}
// abstraction method
relation moreThanZero (   ) {
sign.signValuesMoreThanZero() &
rel.relativeValuesMoreThanZero();
}
// abstraction method
/// (relative-values-equal from to)
relation toRelative ( relativeValues to ) {
rel = to;
}
}
 

class flowValues extends srValues {
// relation method
relation conservationOfFlow ( flowValues flowOut1, flowValues flowOut2) {
if (sign = positive)
   ((flowOut1.sign = positive) | (flowOut2.sign = positive));
if (sign = negative)
   ((flowOut1.sign = negative) | (flowOut2.sign = negative));
if (sign = zero) {
   iff (flowOut1.sign = zero) (flowOut2.sign = zero);
   iff (flowOut1.sign = positive) (flowOut2.sign = negative);
   iff (flowOut1.sign = negative) (flowOut2.sign = positive);}
if (rel = high)
   ((flowOut1.rel = high) | (flowOut2.rel = high));
if (rel = low)
   ((flowOut1.rel = low) | (flowOut2.rel = low));
if (rel = nominal) {
    iff (flowOut1.rel = nominal) (flowOut2.rel = nominal);
    if (! flowOut1.oppositeFlow(flowOut2)) {
         iff (flowOut1.rel = low) (flowOut2.rel = high);
         iff (flowOut1.rel = high) (flowOut2.rel = low);}
    if (flowOut1.oppositeFlow(flowOut2)) {
         iff (flowOut1.rel = high) (flowOut2.rel = high);
         iff (flowOut1.rel = low) (flowOut2.rel = low);}};
}
// relation method
relation negateFlow ( flowValues to) {
if (sign = positive)
   to.sign = negative;
if (sign = negative)
   to.sign = positive;
if (sign = zero)
   to.sign = zero;
rel = to.rel;
}
// relation method
relation oppositeFlow ( flowValues to) {
((sign = positive) & (to.sign = negative)) |
((sign = negative) & (to.sign = positive));
}
}
 

class liquidLevelValues extends srValues {
}
 

class pressureValues extends srValues {
}
 

class temperatureValues extends srValues {
}
 

class fluidPropertyValues {
pressureValues pressure;
flowValues flow;
}
 

class pipe extends fluidPropertyValues {
// abstraction method
relation moreThan ( pipe to ) {
pressure.moreThan(to.pressure) |
flow.moreThan(to.flow);
}
// abstraction method
relation pipePressure ( pressureValues to ) {
pressure = to;
}
// abstraction method
/// MAJOR KLUGE! 
/// include temperature atttribute in pipe?? 
/// this.temperature.equal(to);
relation pipeTemperature ( temperatureValues to ) {
pressure.sign = to.sign;
pressure.rel = to.rel;
}
}
 


