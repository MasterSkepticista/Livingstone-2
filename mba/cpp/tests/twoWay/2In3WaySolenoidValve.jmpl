// this code is automatically generated by Stanley VJMPL

class _2In3WaySolenoidValve {

// --- inputs --- 
_3WayCmd valveCmdIn;
/// Normally open port
pipe pos1PipeIn;
/// Normally closed port
pipe pos2PipeIn;
// --- outputs --- 
/// Common port
pipe pipeOut;
// --- attributes --- 
displayStateValues displayState;
// --- mode names --- 
private enum ModeType {position1, faulty, position2, stuckInPosition1, stuckInPosition2};
private ModeType mode;
stateVector [mode];

// --- parameters --- 
contextValue context;

relation _2In3WaySolenoidValve_setParams (contextValue paramVal1_1) {
context = paramVal1_1;
}

// --- constructor --- 
/// A 3-way, 2-position solenoid valve that is used as a 2-input selector.
{
// --- background model --- 
// --- attribute facts --- 
if (mode = position1)
  displayState = closed;
else {
if (mode = position2)
  displayState = open;
else {
if (mode = faulty |
    mode = stuckInPosition1 |
    mode = stuckInPosition2)
  displayState = failed;
else
  displayState = unknown;
}};


// --- mode models --- 
switch (mode) {

case position1: 
pos1PipeIn = pipeOut;
pos2PipeIn.flow.sign = zero;

case faulty: 
;

case position2: 
pos2PipeIn = pipeOut;
pos1PipeIn.flow.sign = zero;

/// Stuck in non-energized position
case stuckInPosition1: 
pos1PipeIn = pipeOut;
pos2PipeIn.flow.sign = zero;

/// Stuck in energized position
case stuckInPosition2: 
pos2PipeIn = pipeOut;
pos1PipeIn.flow.sign = zero;

}

}

// --- transitions --- 
transition toPosition2(position1, position2) {
valveCmdIn = position2Cmd;
}
transition toPosition1(position2, position1) {
valveCmdIn = position1Cmd;
}


// --- probabilities --- 
failure faulty(*, faulty, unlikely) {
}
failure stuckInPosition1(*, stuckInPosition1, likely) {
}
failure stuckInPosition2(*, stuckInPosition2, lessLikely) {
}

}

