# See the file "mba/disclaimers-and-notices-L2.txt" for
# information on usage and redistribution of this file,
# and for a DISCLAIMER OF ALL WARRANTIES.

############## Makefile ################
# top.mk will be included above here.

# $Id: Makefile.in,v 1.7 2001/11/16 23:52:56 lbrown Exp $
all : manuals

# executables
FIG2DEV=fig2dev
DOT=dot
PERL=@PERL@

# the name of the manual
MAN = l2dev

# We have two variables to store the list of manuals we can have.
# The list is set next to the rules, using += ; this is why the 'manuals'
# target can't be defined up here -- it will read the empty list (is that
# a bug?  I'm never sure about the semantics of += ).
# As per the GNU coding standards, the manual is in the repository and, in
# a distribution, the user needn't have texinfo or other tools to create it.
# Unlike as per the GNU coding standards, the info manual isn't included --
# only the html manual is.  IMHO, info is useless when html is available
# unless you're stuck on a terminal; in which case, just build the info
# manual.
MANUALS =
OTHER_MANUALS =

# the top texi file we use to create the manual
TOP_TEXI = $(MAN).texi

# all texi files are generated and removed in a make clean
TEXI_FILES = $(TOP_TEXI) \
	configuration.texi \
	file_layout.texi \
	loop.texi \
	philosophy.texi \
	readers.texi \
	software_components.texi

# fig files are source for the images and are translated to image types
# by fig2dev
FIG_FILES = \
	components_image.fig \
	dataflow_image.fig \
	engine_classes.fig

# include the list of figures we build.  Removed on make maintainer-clean
ALL_FIGURES = $(FIG_FILES:%.fig=%.png) config.png

# if the texi files are missing, but l2.info is up to date, don't rebuild
# l2.info nor the texi files.  This allows distributing the info file
# correctly.
.SECONDARY: $(TEXI_FILES)


CLEANFILES = $(MAN).aux $(MAN).cp $(MAN).fn $(MAN).fns $(MAN).ky \
	$(MAN).log $(MAN).pg $(MAN).toc $(MAN).tp $(MAN).vr *.bak \
	$(TEXI_FILES) \
	$(OTHER_MANUALS)

# only remove l2.info if the maintainer asks to do so; info files should be
# distributed already-generated, to avoid requiring a correct, up-to-date
# version of texinfo on the host.
MCLEANFILES = $(MANUALS) $(ALL_FIGURES)


########################################
## Make the manuals
## Manuals that aren't included in the distribution are
## removed by make clean.

OTHER_MANUALS += $(MAN).ps
$(MAN).ps: $(MAN).dvi
	dvips -o $@ $<

OTHER_MANUALS += $(MAN).dvi
$(MAN).dvi: $(TEXI_FILES)
	texi2dvi $(TOP_TEXI) || { $(RM) $@ ; exit 1 ; }

OTHER_MANUALS += $(MAN).pdf
$(MAN).pdf: $(TEXI_FILES)
	texi2dvi --pdf $(TOP_TEXI)  || { $(RM) $@ ; exit 1 ; }

MANUALS += $(MAN).html
$(MAN).html: $(TEXI_FILES) $(ALL_FIGURES)
	makeinfo --no-split --html $(TOP_TEXI) || { $(RM) $@ ; exit 1 ; }

# html does the job better than info, so let's not have this by default.
OTHER_MANUALS += $(MAN).info
$(MAN).info: $(TEXI_FILES)
	makeinfo --no-split $(TOP_TEXI) || { $(RM) $@ ; exit 1 ; }



####################
## Quote the { and } characters in C files for inclusion into texinfo.
## Typically, we'll do
## @example
## @include foo.texi
## @end example
%.texi: %.c
	sed 's%[{}]%@&%g' $< > $@ || { $(RM) $@ ; exit 1 ; }

####################
## Strip leading whitespaces from items.
## I write them in for legibility, but the on-line info manual suffers when
## I do that.
%.texi: %.manual
	$(PERL) ./strip_leading_ws $< > $@

####################
## Making png image files from xfig files.
%.png: %.fig
	$(FIG2DEV) -L png $< $@


####################
## Making the png file from dot files.
## The dot file itself is generated by perl; so it's secondary (otherwise,
## we'd need to put it in CVS, which isn't necessary).
.SECONDARY: config.dot
config.png : config.dot
	$(DOT) -Tpng -o config.png config.dot

config.dot : config.graph graph_reader.pl
	$(PERL) ./graph_reader.pl config.graph



####################
# how to build the manuals: build them seperately
# MANUALS is set with the rules to actually build them.
# This must be after setting them for some reason I don't fully understand.
.PHONY: manuals
manuals: $(MANUALS)


####################
# installing
# Only the info manual is installed; there isn't a standard place to put
# html or PDF.
install: install-docs
uninstall: uninstall-docs

# Nope; don't install the info.
INSTALLED_MANUALS = #$(infodir)/$(MAN).info

install-docs: $(INSTALLED_MANUALS)

uninstall-docs:
	$(RM) $(INSTALLED_MANUALS)

$(infodir)/$(MAN).info: $(MAN).info
	@test -d $(infodir) || \
		echo "$(INSTALL) -d $(infodir)" && \
		$(INSTALL) -d $(infodir) ;
	$(INSTALL) -m 444 $< $@

# bot.mk will be included below here
########################################

