/***
 *** See the file "mba/disclaimers-and-notices-L2.txt" for
 *** information on usage and redistribution of this file,
 *** and for a DISCLAIMER OF ALL WARRANTIES.
 ***/

/* $Id: l2conf.h,v 1.10 2006/05/01 19:04:23 taylor Exp $ */
#ifndef l2conf_HEADER
#define l2conf_HEADER

#ifdef HAVE_CONFIG_H
   /* use config generated by GNU configure */
#  include "gnu_conf.h"
#else
    /* use default config generated by hand */
#  include "def_conf.h"
#endif


/**
 * Just to stack-allocate arrays of char easily and dodge the usual problem of
 * keeping literal constants consistent.
 * This constant is used in several places for several different purposes.
 * MBA_string.h: buffer for converting primitive types to MBA_string
 * from_l2.h: Buffer for reading a line from a *.l2 model file
 * parameters.cpp: Buffer for reading a line from a *.params file
 * L2_string_map.cpp: Buffer for building a Variable name
 * ltms_debug.cpp: Buffer for reading a command line or building indentation
 * livdll.cpp:
 *   Buffer for building an error string (throw_error(), *unassignJNI*(),
 *   *getPropValue*(), *setAttributeMode*(), *setTransitionVariableAtTime*(),
 *   *variableValueAtTime*(), *variableExogenousAtTime*(), *assign*(),
 *   *addAssumption*())
 *   Buffer for converting Java strings to MBA_string (*minProgress*(),
 *   *fullProgress*(), *setTransitionVariableAtTime*(), *parseCmd*())
 *   Initial size for a growable string (*assignMultiple*(),
 *   *executeWarpCommands*())
 *   Buffer for holding a Variable name (*mapOverAttributeNames*())
 * cbfs_tracker.cpp: Buffer for building the termination reason string
 * from_l2.cpp: Buffer for reading a line (readline()); buffer for returning
 *   words from the line (parse_enums(), parse_clauses(),
 *   parse_one_transition())
 * \todo This should likely be moved somewhere else, into non-flight code.
 */
#define MBA_MAX_LINE_SIZE  512


/**
 * Disable some warnings VC++ puts out which hide everything else.
 * We don't develop much under VC++ anyway.
 */
#if _MSC_VER > 1000

// Disable VC++ warnings concerning identifier was truncated to '255'
// characters in the browser information.
# pragma warning( disable : 4786 )

/**
 * Disable VC++ warnings only if exception handling is enabled. The
 * warning is concerning no matching operator delete found; memory will
 * not be freed if initialization throws an exception.
 * This is a problem; but in general, just don't throw exceptions in a ctor.
 */

# ifdef _CPPUNWIND
#  pragma warning( disable : 4291 )
# endif

#endif /* _MSC_VER > 1000 */

/* g++ 3.2.2 requires typename, but VxWorks won't accept it */
#if (__GNUC__ > 2) | defined(_MSC_VER)
/* g++ 3 and later */
#define TYPENAME typename
#else
/* g++ earlier than 3, or non-g++, non-msvc++ */
#define TYPENAME
#endif


/*
 * VXWORKS531 implies VXWORKS, so make this implication explicit. Therefore
 * compiler options -DVXWORKS and -DVXWORKS531 aren't both required.
 */
#if defined(VXWORKS531) && !defined(VXWORKS)
#define VXWORKS
#endif

#endif
